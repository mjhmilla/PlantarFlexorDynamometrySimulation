flag_outerLoopMode = 1;

if(flag_outerLoopMode==0)
  clc;
  close all;
  clear all;
  flag_outerLoopMode  = 1;
  flag_tendonType     = 2;
  flag_preloadSetting = 1; 
  % 1 : plot 100% preload and 0% preload
  % 2 : plot 50% preload
  flag_useMaganarisCEArchitecture = 1;
  flag_useTendonDamping   = 0;
end



%%
%Settings
%%
m2mm    = 1000;
rad2deg = 180/pi; 

standardTendonElasticity = 0.049;
highTendonElasticity     = 0.092;

holzer2020_optimal_fascicle_length = 42; %GM in mm

flag_plotKGRData=1;
flag_plotErrorCloud=0;
flag_plotFvLine = 0;
flag_ignoreHauraix2013=1;

errorBarLineWidth  = 1;
errorBarMarkerSize = 4;
errorBarCapSize    = 0;
errorBarMarkerEdgeColor= [1,1,1];

dataFolder      = '../data/';
outputFolder    = '../plots/';

flag_plotSimOmegaVsVelocity=1;



normalizedTendonDamping          = 0;
normalizedTendonDampingConstant  = 0;



if(flag_tendonType==3)
  flag_useTendonDamping   = 0;  
end
if(flag_useTendonDamping==1 && flag_tendonType ~= 3)
  normalizedTendonDamping          = 0.0556;
  normalizedTendonDampingConstant  = 0;
end



flag_rampType           = 0;
% 0: Holzer
% 1: Hauraix 2015

switch(flag_rampType)

  case 0
    rampStr = 'ramp_Holzer_';
  case 1
    rampStr = 'ramp_Hauraix2015_';
  otherwise
    asert(0,'flag_rampType must be 0 (Holzer) or 1 (Hauraix 2015)');
end


tendonDampingStr = ['_TendonDamping_',...
        [num2str(round((flag_useTendonDamping*normalizedTendonDamping)*100,0)),'p']]; 
tendonNoDampingStr = ['_TendonDamping_',...
        [num2str(0,0),'p']]; 

%%
%Set the configuration of the simulation that you would like to plot
%%

architectureStr = sprintf('MaganarisCE_%d_',flag_useMaganarisCEArchitecture);

scaleHauraix = 1.0;% 0.8314;

smallMomentArm    = 0.0459;
standardMomentArm = smallMomentArm*1.22;

fractionOfFastTwitchFibers          = 0.5;
ankleAchillesTendonMomentArm        = standardMomentArm;
%measurementSettingStr = '_fixedFiberLength';
measurementSettingStr = 'fixedAnkleAngle';  


flag_useHauraixVmax = 0;
maximumNormalizedFiberVelocity=10;
             
vmaxStr = ['vmax_',num2str(round(maximumNormalizedFiberVelocity,0)),'_']; 
if(flag_useHauraixVmax==1)
  maximumNormalizedFiberVelocity = 0.308/lceOpt;
  vmaxStr = ['vmax_Hauraix_']; 
end

scaleLceOpt = 1;
scaleLceOptStr = ['lceOptScale_',num2str(round(scaleLceOpt*100)),'p_'];


preloadStr0   = ['_Preload_',num2str(round(0,0))];
preloadStr50  = ['_Preload_',num2str(round(50,0))];
preloadStr100 = ['_Preload_',num2str(round(100,0))];

%Generate the key words needed to form the name of the corresponding file
fractionOfFastTwitchFibersStr = ...
  ['FastTwitch_',num2str(round(fractionOfFastTwitchFibers*100,0))];

tendonStrainAtOneNormForceStrA = ...
  sprintf('_Tdn_%1.1f',round(standardTendonElasticity*100,1));
tendonStrainAtOneNormForceStrA(1,end-1)='p';
tendonLabelA = [sprintf('%1.1f',round(standardTendonElasticity*100,1)),'\%'];


tendonStrainAtOneNormForceStrB = ...
  sprintf('_Tdn_%1.1f',round(highTendonElasticity*100,1));
tendonStrainAtOneNormForceStrB(1,end-1)='p';
tendonLabelB = [sprintf('%1.1f',round(highTendonElasticity*100,1)),'\%'];

tendonStrainAtOneNormForceStrC = ...
  sprintf('_Tdn_%1.1f',0);
tendonStrainAtOneNormForceStrC(1,end-1)='p';
tendonLabelC = [sprintf('%1.1f',0),'\%'];

ankleAchillesTendonMomentArmStr = sprintf('_%1.1fcm_',...
  round(ankleAchillesTendonMomentArm*100,1));
ankleAchillesTendonMomentArmStr(1,end-4)='p';


tendonStr = '';
tendonLabel = '';
modelName = '';
switch(flag_tendonType)
  case 1
    tendonStr = tendonStrainAtOneNormForceStrA;    
    tendonLabel = ['Typical Achilles Tendon ($e^{T}_\circ=$',tendonLabelA,')'];
    modelName='dampedFiberElasticTendon_';
  case 2
    tendonStr = tendonStrainAtOneNormForceStrB;
    tendonLabel = ['Compliant Achilles Tendon ($e^{T}_\circ=$',tendonLabelB,')'];    
    modelName='dampedFiberElasticTendon_';    
  case 3
    tendonStr = tendonStrainAtOneNormForceStrC;
    tendonLabel = ['Rigid Tendon'];      
    modelName='rigidTendon_';    
  otherwise
    
    assert(0);
end

tendonStrRef = tendonStrainAtOneNormForceStrC;
tendonLabelRef = ['Rigid Tendon'];      
modelNameRef='rigidTendon_';    


preloadSettingStr = '';
if(flag_preloadSetting==2)
  preloadSettingStr = 'preloadSweep_';
end

outputFileName  = ['fig_ForceVelocity_Simulation_Vs_Experiment_',...
                  preloadSettingStr,...
                  architectureStr,...
                  scaleLceOptStr,...            
                  vmaxStr,...
                  rampStr,...  
                  fractionOfFastTwitchFibersStr,...
                  tendonStr,...
                  tendonDampingStr,...
                  ankleAchillesTendonMomentArmStr,...
                  measurementSettingStr,'.pdf'];
outputFileNamePub  = ['fig_ForceVelocity_Simulation_Vs_Experiment_',...
                  preloadSettingStr,...  
                  architectureStr,...
                  scaleLceOptStr,...            
                  vmaxStr,...
                  rampStr,...  
                  fractionOfFastTwitchFibersStr,...
                  tendonStr,...
                  tendonDampingStr,...                  
                  ankleAchillesTendonMomentArmStr,...
                  measurementSettingStr,'_Pub.pdf'];

outputFile2Name  = ['fig_SimulationDetail_',...
                  preloadSettingStr,...  
                  architectureStr,...
                  scaleLceOptStr,...            
                  vmaxStr,...
                  rampStr,...  
                  fractionOfFastTwitchFibersStr,...
                  tendonStr,...
                  tendonDampingStr,...                  
                  ankleAchillesTendonMomentArmStr,...
                  measurementSettingStr,'.pdf'];

expData     = '../data/Own_Study.xlsx'; 
expDataKRG  = '../data/Length_Velocity_Plot.mat';


%This was called `path' before: this is also the name of a Matlab's
%search path: do not make variables with the same name. Matlab should 
%give you an error, but it doesn't, it just silently lets you overwrite
%an important internal varible


simDataSets = {};

switch flag_preloadSetting
  case 1
    simDataSets = {...
      ['../data/simFv_gasmed_preload_0p_',...
        architectureStr,...
        modelName,...
        scaleLceOptStr,...            
        vmaxStr,...  
        rampStr,...
        fractionOfFastTwitchFibersStr,...
        tendonStr,...
        tendonDampingStr,...
        ankleAchillesTendonMomentArmStr,...
        measurementSettingStr,'.mat'],...
      ['../data/simFv_gasmed_preload_100p_',...
        architectureStr,...
        modelName,...
        scaleLceOptStr,...            
        vmaxStr,...  
        rampStr,...
        fractionOfFastTwitchFibersStr,...
        tendonStr,...
        tendonDampingStr,...    
        ankleAchillesTendonMomentArmStr,...
        measurementSettingStr,'.mat']
      };
    refDataSet = {['../data/simFv_gasmed_preload_100p_',...
        architectureStr,...
        modelNameRef,...
        scaleLceOptStr,...            
        vmaxStr,...  
        rampStr,...
        fractionOfFastTwitchFibersStr,...
        tendonStrRef,...
        tendonNoDampingStr,...    
        ankleAchillesTendonMomentArmStr,...
        measurementSettingStr,'.mat']};
  case 2
    simDataSets = {...
      ['../data/simFv_gasmed_preload_0p_',...
        architectureStr,...
        modelName,...
        scaleLceOptStr,...            
        vmaxStr,...  
        rampStr,...
        fractionOfFastTwitchFibersStr,...
        tendonStr,...
        tendonDampingStr,...
        ankleAchillesTendonMomentArmStr,...
        measurementSettingStr,'.mat'],...
      ['../data/simFv_gasmed_preload_100p_',...
        architectureStr,...
        modelName,...
        scaleLceOptStr,...            
        vmaxStr,...  
        rampStr,...
        fractionOfFastTwitchFibersStr,...
        tendonStr,...
        tendonDampingStr,...    
        ankleAchillesTendonMomentArmStr,...
        measurementSettingStr,'.mat'],...
      ['../data/simFv_gasmed_preload_50p_',...
        architectureStr,...
        modelName,...
        scaleLceOptStr,...            
        vmaxStr,...  
        rampStr,...
        fractionOfFastTwitchFibersStr,...
        tendonStr,...
        tendonDampingStr,...    
        ankleAchillesTendonMomentArmStr,...
        measurementSettingStr,'.mat'],...       
      };
    refDataSet = {['../data/simFv_gasmed_preload_100p_',...
        architectureStr,...
        modelNameRef,...
        scaleLceOptStr,...            
        vmaxStr,...  
        rampStr,...
        fractionOfFastTwitchFibersStr,...
        tendonStrRef,...
        tendonNoDampingStr,...    
        ankleAchillesTendonMomentArmStr,...
        measurementSettingStr,'.mat']};
  otherwise 
    assert(0);
end

 

simDataSetTag = {'Non-preloaded','100\% Preload', '50\% Preload',};
             
simDataSetName = {['Sim.: ',simDataSetTag{1}],...
                  ['Sim.: ',simDataSetTag{2}],...
                  ['Sim.: ',simDataSetTag{3}]};      
                
                
tendonDataSetName = { tendonLabel,...
                      tendonLabel,...
                      tendonLabel};                   
 
%simDataSetColor = [0.5,0.5,0.5;...
%                   0.85,0.85,0.85];                
                
simDataSetColor  = [0,0,0; ...
                    0,0,0; ...
                    0,0,0]./255;
                  
simDataSetColorAlt = [0,0,1;...
                      1,0,0;...
                      1,0,1];                  
               
simDataSetLineType = {'--','-','.-'};                  

simDataPlotWhiteOutline = [1,0,1];

simDataSetLineWidth= [1.0,1,1];

load([dataFolder,'normMuscleCurves_',...
                  fractionOfFastTwitchFibersStr,'.mat']);
load([dataFolder,'muscleArch_',...
                  fractionOfFastTwitchFibersStr,'.mat']);

fvCurveSample = calcBezierYFcnXCurveSampleVector(...
                normMuscleCurves.fiberForceVelocityCurve, 500);

%%
% Subplot Configuration
%%

scaleNormForce =  100;

ankleAchillesTendonMomentArm = 0.054; %moment arm in m
%from Rugg et al.

omegaMaxDeg = 200;
m2mm = 1000;
velMaxMM    = (omegaMaxDeg*(pi/180))*ankleAchillesTendonMomentArm*m2mm;
workMax = 35;

idxOmegaVsVel=1;
idxForceVsVel=3;
idxForceVsOmega=5;

idxVelocityDecomposition = 2;
idxFiberLength=4;
idxMultipliers=6;

idxWorkAtMeasurement = 7;
idxTotalWorkA        = 9;
idxTotalWorkB        = 10;
idxProportionWorkAB  = 8;

subplotList = [idxOmegaVsVel;...
               idxForceVsVel;...
               idxForceVsOmega;...
               idxVelocityDecomposition;...
               idxFiberLength;...
               idxMultipliers;...
               idxWorkAtMeasurement;...
               idxProportionWorkAB;...
               idxTotalWorkA;...
               idxTotalWorkB];

subplotXlim = [0,omegaMaxDeg.*1.1;...
               0,velMaxMM;...
               0,omegaMaxDeg;...
               0,velMaxMM;...
               0,velMaxMM;...
               0,velMaxMM;...
               0,omegaMaxDeg;...
               0,omegaMaxDeg;...               
               75,105;...
               75,105];
             
subplotYlim = [0,100;...
               0,1.1.*scaleNormForce;...
               0,1.1.*scaleNormForce;...
               -30,201;...
               0,1.2;...
               -0.1,1.1;...
               0,workMax;...
               0,1000;...
               0,workMax;...
               0,workMax];

omegaDegTicks     = [0:25:175];             
velMMTicks        = round([0:0.125:1].*velMaxMM,0);             
forcePercentTicks = round([0:0.25:1].*100,0);

angleDegTicks     = [75, 90, 105];       
vceATTicks        = [0:50:300];
vtTicks           = [-200:50:200];
forceTicks        = [0:20:100];
lceNTicks         = [0:0.25:1.5];
omegaDegTicks     = round([0:0.125:1].*omegaMaxDeg,0);             
velMMTicks        = [0:25:200];    
workTicks         = [0:10:40];

subplotTicks(10) =struct('xticks',[],'yticks',[]);
subplotTicks(1).xticks = omegaDegTicks;
subplotTicks(1).yticks = velMMTicks;

subplotTicks(2).xticks = velMMTicks;
subplotTicks(2).yticks = forceTicks;

subplotTicks(3).xticks = omegaDegTicks;
subplotTicks(3).yticks = forceTicks;

subplotTicks(4).xticks = [0:25:200];
subplotTicks(4).yticks = [-25:25:200];

subplotTicks(5).xticks = [0:25:200];
subplotTicks(5).yticks = round([0,0.25,0.5,0.75,1.0,1.25],2);

subplotTicks(6).xticks = [0:25:200];
subplotTicks(6).yticks = round([0:0.1:1.1],1);

subplotTicks(7).xticks = [0:25:200];
subplotTicks(7).yticks = round(workTicks,1);

subplotTicks(8).xticks = [0:25:200];
subplotTicks(8).yticks = round([0:100:1000],1);

subplotTicks(9).xticks = [75:5:105];
subplotTicks(9).yticks = round(workTicks,1);

subplotTicks(10).xticks = [75:5:105];
subplotTicks(10).yticks = round(workTicks,1);




simDataAddLegend = [1,1,1,0,0,0,1,0,0,0];
simDataLegendPosition = {'SouthEast','NorthEast','SouthWest','NorthWest',...
                         'SouthEast','SouthWest','NorthEast','SouthWest',...
                         'SouthWest','NorthWest'};

subPlotIndexDetail = [1 2; 3 4; 5 6; 7 8; 9 10];                       
                       
%%
% Individual Data Series Configuration
%%

flag_plotExpMeanLine = 0;

greyFill1 = [1,1,1].*0.75;
greyFill2 = [1,1,1].*0.9;

expColor = [1,1,1].*0.5;
expFillColor = expColor.*0.25 + greyFill1.*(0.75);
expLineWidth = 1.0;
expErrorLineType = 'o';
expLabel = 'Exp.: Preload';

ChinoColor = [1,0.65,1];
ChinoFillColor = ChinoColor.*0.25+greyFill2.*0.75;
ChinoLineWidth = 1.0;
ChinoErrorLineType = 'o';
ChinoLineType = '';
ChinoLabel = 'Chino 2008: Preload';


Hauraix2015Color        = [0.5,0.5,1]; 
Hauraix2015FillColor    = Hauraix2015Color.*0.25 + greyFill2.*0.75; 
Hauraix2015LineWidth= 1.0; 
Hauraix2015ErrorLineType = 'o';
Hauraix2015LineType = 'o';
Hauraix2015MarkerSize = errorBarMarkerSize;
Hauraix15Label = 'Hauraix 2015: Non-preloaded';


Hauraix2013Color      = [0.75,0.75,1]; 
Hauraix2013FillColor  = Hauraix2013Color.*0.25 + greyFill2.*0.75;
Hauraix2013LineWidth= 1.0; 
Hauraix2013ErrorLineType = 'o';
Hauraix2013LineType = '';

if(flag_plotExpMeanLine ==1)
  expErrorLineType = [expErrorLineType,':'];
  ChinoErrorLineType = [ChinoErrorLineType,':'];
  Hauraix2015ErrorLineType = [Hauraix2015ErrorLineType,':'];
  Hauraix2013ErrorLineType = [Hauraix2013ErrorLineType,':'];
  
end


%%
% Plot configuration
%%



numberOfFiguresPerPage        = 10;
numberOfVerticalPlotRows      = 5;
numberOfHorizontalPlotColumns = 2;    
assert(numberOfVerticalPlotRows*numberOfHorizontalPlotColumns ...
         >= numberOfFiguresPerPage);

plotHorizMarginCm = 2;
plotVertMarginCm  = 2;           
plotHeight  = 8;
plotWidth   = 10;
pageHeight  = numberOfVerticalPlotRows*(plotHeight+plotVertMarginCm);%29.7;
pageWidth   = numberOfHorizontalPlotColumns*(plotWidth+plotHorizMarginCm);%21.0;           

plotConfigGeneric;


fig_Pub    = figure;
%fig_Pub = figure;

%setOfPlots(2) = struct('h',[]);
%setOfPlots(1).h = fig_Pub;
%setOfPlots(2).h = fig_Pub;



%%
% Tabulated experimental data
%%

Norm_Muscle_Force_Individual  = xlsread(expData,'Muscle_Force_Individual').*scaleNormForce;
Vicon_angular_Velocity        = xlsread(expData,'Vicon_angular_Velocity');
FSZ_Velocity_Individual       = xlsread(expData,'Velocity_Individual');
Isomed_angular_Velocity       = xlsread(expData,'Isomed_angular_Velocity');

Chino_Joint_Velo      = [0 51.642 98.657 134.254 188.657];                       % Data taken from Chino et al., 2008
Chino_Joint_Velo_STD  = [0 5.038 9.739 20.821 16.119];

Chino_force     = [1 .868 .768 .697 .603] .*scaleNormForce;
Chino_force_STD = [0 .143 .203 .242 .178] .*scaleNormForce;

Chino_Fascicle_Velo     = [80.168 54.246 42.107 22.128 0];
Chino_Fascicle_Velo     = flip(Chino_Fascicle_Velo);
Chino_Fascicle_Velo_STD = [23.52 19.221 12.266 5.564 0];
Chino_Fascicle_Velo_STD = flip(Chino_Fascicle_Velo_STD);


Hauraix_Joint_Velo = [0   29.4442   89.0488  147.9360  203.2319...
                      249.9101  277.9173];                                  % Data taken from Hauraix et al., 2015
Hauraix_Joint_Velo = Hauraix_Joint_Velo.*scaleHauraix;                            % account for the difference in angular ankle joint velocity and dynamometer velocity
Hauraix_Force = [431.76 380.33 262.52 198.54 159.07 139.33 129.77];
Hauraix_Force_norm = (Hauraix_Force./Hauraix_Force(1)).*scaleNormForce;
Hauraix_Fascicle_Velo = [0 10.61 46.06 72.85 98.53 120.58 131.19];

Hauraix13_Fascicle_Velo = [56 85 113 131 153 168];                          % Data taken from Hauraix et al., 2013
Hauraix13_Joint_Velo = [30 90 150 210 270 330];


expLengthVelocity = load(expDataKRG);

%%
%Load digitzed experimental data
%%
labelsHauraix2015 = {'w30','w90','w150','w210','w270','w330'};

Hauraix2015Fig3A   = loadDigitizedData('../dataHauraix2015/HauraixFig3A.csv',...
                                    'x','y',labelsHauraix2015,'Fig3A');
Hauraix2015Fig3B   = loadDigitizedData('../dataHauraix2015/HauraixFig3B.csv',...
                                    'x','y',labelsHauraix2015,'Fig3B');
Hauraix2015Fig3C   = loadDigitizedData('../dataHauraix2015/HauraixFig3C.csv',...
                                    'x','y',labelsHauraix2015,'Fig3C');
Hauraix2015Fig3D   = loadDigitizedData('../dataHauraix2015/HauraixFig3D.csv',...
                                    'x','y',labelsHauraix2015,'Fig3D');
Hauraix2015Fig3E   = loadDigitizedData('../dataHauraix2015/HauraixFig3E.csv',...
                                    'x','y',labelsHauraix2015,'Fig3E');
Hauraix2015Fig3F   = loadDigitizedData('../dataHauraix2015/HauraixFig3F.csv',...
                                    'x','y',labelsHauraix2015,'Fig3F');
   
%Map the ankle angle convention to the one used here                                  
scaleFactorYFig3F = 1;
for z=1:1:length(Hauraix2015Fig3A)
  Hauraix2015Fig3A(z).x = 90-(Hauraix2015Fig3A(z).x-90);
  Hauraix2015Fig3B(z).x = 90-(Hauraix2015Fig3B(z).x-90);
  Hauraix2015Fig3C(z).x = 90-(Hauraix2015Fig3C(z).x-90);
  Hauraix2015Fig3D(z).x = 90-(Hauraix2015Fig3D(z).x-90);  
  Hauraix2015Fig3E(z).x = 90-(Hauraix2015Fig3E(z).x-90);    
  Hauraix2015Fig3F(z).x = 90-(Hauraix2015Fig3F(z).x-90);      
  
  if(z==1)
    scaleFactorYFig3F = 75/max(Hauraix2015Fig3F(z).y);
  end
  Hauraix2015Fig3F(z).y = Hauraix2015Fig3F(z).y.*scaleFactorYFig3F;
end


omegaHauraix2015Fig3 = zeros(length(Hauraix2015Fig3A),1);
dlceHauraix2015Fig3 = zeros(length(Hauraix2015Fig3A),1);
for z=1:1:length(Hauraix2015Fig3A)
  omegaHauraix2015Fig3(z,1) = interp1(Hauraix2015Fig3A(z).x,...
                                      Hauraix2015Fig3A(z).y,...
                                      90);
  dlceHauraix2015Fig3(z,1) = interp1(Hauraix2015Fig3D(z).x,...
                                      Hauraix2015Fig3D(z).y,...
                                      90);
                                    
                                    
end

  %%
  % R^2 ankle angular velocity vs. fascicle velocity
  %%

  
    [row,col] = find(subPlotPanelIndex==idxOmegaVsVel);          
     subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
     subplot('Position',subPlotVec);    

     if(flag_plotErrorCloud==1)
       if(flag_plotKGRData==1)
          setOfPlots(iterPlot).h = errorcloud(...
                    setOfPlots(iterPlot).h, ...
                    mean(-expLengthVelocity.Velo_Vicon      ,2),...
                    mean( expLengthVelocity.Velo_fascicle   ,2),...
                     std( expLengthVelocity.Velo_fascicle,0,2),...
                     std( expLengthVelocity.Velo_fascicle,0,2),...
                     std( expLengthVelocity.Velo_Vicon,0,2),...
                     std( expLengthVelocity.Velo_Vicon,0,2),...
                    expErrorLineType,...
                    expFillColor,expColor, expColor, expLineWidth,expLabel);
          hold on;         
       else
          setOfPlots(iterPlot).h = errorcloud(...
                    setOfPlots(iterPlot).h, ...
                    mean(-Vicon_angular_Velocity,2),...                    
                    mean(FSZ_Velocity_Individual,2),...
                    std(FSZ_Velocity_Individual,0,2),...
                    std(FSZ_Velocity_Individual,0,2),...
                    std(-Vicon_angular_Velocity,0,2),...
                    std(-Vicon_angular_Velocity,0,2),...                    
                    expErrorLineType,...
                    expFillColor,expColor, expColor, expLineWidth,expLabel);
          hold on;
       end
     end

    plot( Chino_Joint_Velo,...
          Chino_Fascicle_Velo,...          
          ChinoLineType,...
          'Color',ChinoColor,...
          'MarkerFaceColor',ChinoColor,...
          'MarkerEdgeColor',errorBarMarkerEdgeColor,...
          'LineWidth',ChinoLineWidth,...
          'DisplayName',ChinoLabel);
    hold on; 

    plot(Hauraix_Joint_Velo,...
      Hauraix_Fascicle_Velo,...
      Hauraix2015LineType,...
      'Color',Hauraix2015Color,...
      'MarkerFaceColor',Hauraix2015Color,...
      'MarkerEdgeColor',errorBarMarkerEdgeColor,...
      'MarkerSize',Hauraix2015MarkerSize,...
      'LineWidth',Hauraix2015LineWidth,...
      'DisplayName',Hauraix15Label);
    hold on
    plot(omegaHauraix2015Fig3,...
      dlceHauraix2015Fig3.*10,...
      '.-',...
      'Color',Hauraix2015Color,...
      'MarkerFaceColor',Hauraix2015Color,...
      'MarkerEdgeColor',errorBarMarkerEdgeColor,...
      'MarkerSize',Hauraix2015MarkerSize,...
      'LineWidth',Hauraix2015LineWidth,...
      'DisplayName',Hauraix15Label);
    hold on    
    
    if(flag_ignoreHauraix2013==0)
      plot(Hauraix13_Joint_Velo,...
           Hauraix13_Fascicle_Velo,...           
           Hauraix2013LineType,...
           'Color',Hauraix2013Color,...
           'MarkerFaceColor',Hauraix2013Color,...
           'LineWidth',Hauraix2013LineWidth,...
           'DisplayName','Hauraix 2013: Non-preloaded');
      hold on;
    end

    if(flag_plotKGRData==1) 
      m = errorbar( mean(-expLengthVelocity.Velo_Vicon      , 2),...
                    mean( expLengthVelocity.Velo_fascicle   , 2),...
                    std( expLengthVelocity.Velo_fascicle, 0, 2),...
                    std( expLengthVelocity.Velo_fascicle, 0, 2),...
                    std( expLengthVelocity.Velo_Vicon,    0, 2),...                                      
                    std( expLengthVelocity.Velo_Vicon,    0, 2),... 
                    expErrorLineType,...
                    'Color',expColor,...                
                    'MarkerSize',errorBarMarkerSize,...                  
                    'CapSize',errorBarCapSize,...
                    'MarkerFaceColor', expColor, ...
                    'MarkerEdgeColor',errorBarMarkerEdgeColor,...
                    'DisplayName',expLabel);  
      hold on        
    else
      m = errorbar( mean(-Vicon_angular_Velocity,2),...
                    mean(FSZ_Velocity_Individual,2),...
                    std(FSZ_Velocity_Individual,0,2),...
                    std(FSZ_Velocity_Individual,0,2),...
                    std(-Vicon_angular_Velocity,0,2),...
                    std(-Vicon_angular_Velocity,0,2),...                    
                    expErrorLineType,...
                    'Color',expColor,...                
                    'MarkerSize',errorBarMarkerSize,...                  
                    'CapSize',errorBarCapSize,...
                    'MarkerFaceColor', expColor, ...
                    'MarkerEdgeColor',errorBarMarkerEdgeColor,...
                    'DisplayName',expLabel);  
      hold on      
    end    
    

    %m.Marker = 'o';
    %    m.Color = 'k';
    %    m.LineStyle = '';    

    if(flag_plotKGRData==1) 
      
      [p] = polyfit( mean(-expLengthVelocity.Velo_Vicon,   2),...
                     mean( expLengthVelocity.Velo_fascicle,2),...
                     1);
      xxx = linspace(min(mean(-expLengthVelocity.Velo_Vicon,   2)),...
                     max(mean(-expLengthVelocity.Velo_Vicon,   2)));

      yyy = polyval(p,xxx);

      ft = fittype( 'poly1' );
      [fit_A,a] = fit(mean(-expLengthVelocity.Velo_Vicon,   2),...
                      mean( expLengthVelocity.Velo_fascicle,2),ft);


      
    else
      
    
      [p] = polyfit( mean(-Vicon_angular_Velocity,2),...
                     mean(FSZ_Velocity_Individual,2),...
                     1);
      xxx = linspace(min(mean(FSZ_Velocity_Individual,2)),...
                     max(mean(FSZ_Velocity_Individual,2)));

      yyy = polyval(p,xxx);

      ft = fittype( 'poly1' );
      [fit_A,a] = fit(mean(-Vicon_angular_Velocity,2),...
                      mean(FSZ_Velocity_Individual,2),...
                      ft);

    end
    txt = ['R$^2$ of linear fit:',num2str(a.rsquare)];
    ht=text(75,20,txt,'Interpreter','latex','HorizontalAlignment','Left',...
            'VerticalAlignment','Bottom');
    set(ht,'Rotation',30);
    box off

    ylabel('Fascicle Velocity (mm/s)','Interpreter','latex');
    xlabel('Angular Velocity ($^\circ$/s)','Interpreter','latex');   
    title({'Fascicle velocity vs. Ankle joint angular velocity',tendonLabel});
%  end
  
%%
% Tendon force vs. fascicle velocity
%%

    
    [row,col] = find(subPlotPanelIndex==(idxForceVsVel));          
     subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
     subplot('Position',subPlotVec); 

    hold on

    vmax = muscleArch.maximumNormalizedFiberVelocity...
           *muscleArch.optimalFiberLength;
         
        
    dataRef=load(refDataSet{1});    
    headField = fields(dataRef);
    dataRef = dataRef.(headField{1});    
    
    trials = size(dataRef.detailedResults.simulationTime,2);
    measuredFiberVelocityRef               = zeros(trials,1);
    measuredFiberVelocityAlongTendonRef    = zeros(trials,1);
    measuredAnkleAngularVelocityRef        = zeros(trials,1);
    pennationAngleRef                      = zeros(trials,1);
    measuredForceVelocityMultiplierRef     = zeros(trials,1);
    measuredForceRef                       = zeros(trials,1);
    measuredForceAlongTendonRef            = zeros(trials,1);
    
    
    for j=1:1:trials
      %Use interpolation to evaluate the data at the time of the measurement

        measuredFiberVelocityRef(j,1) = ...
          interp1( dataRef.detailedResults.simulationTime(:,j), ...
                   dataRef.standardResults.fiberVelocity(:,j), ...
                   dataRef.detailedResults.measurementTime(1,j));

        measuredFiberVelocityAlongTendonRef(j,1) = ...
          interp1(dataRef.detailedResults.simulationTime(:,j), ...
                  dataRef.standardResults.fiberVelocityAlongTendon(:,j), ...
                  dataRef.detailedResults.measurementTime(1,j));                                         

        measuredAnkleAngularVelocityRef(j,1) = ...
          interp1(dataRef.detailedResults.simulationTime(:,j), ...
                  dataRef.detailedResults.ankleAngularVelocity(:,j), ...
                  dataRef.detailedResults.measurementTime(1,j));   

        pennationAngleRef(j,1) = ...
          interp1(dataRef.detailedResults.simulationTime(:,j), ...
                  dataRef.standardResults.pennationAngle(:,j), ...
                  dataRef.detailedResults.measurementTime(1,j));   

        measuredForceVelocityMultiplierRef(j,1) = ...
          interp1(dataRef.detailedResults.simulationTime(:,j), ...
                  dataRef.standardResults.fiberForceVelocityMultiplier(:,j), ...
                  dataRef.detailedResults.measurementTime(1,j));              

        measuredForceAlongTendonRef(j,1) = ...
          interp1(dataRef.detailedResults.simulationTime(:,j),...
                  dataRef.standardResults.normFiberForceAlongTendon(:,j),...
                  dataRef.detailedResults.measurementTime(1,j));
                
        measuredForceRef(j,1) = measuredForceAlongTendonRef(j,1)...
                               /cos(pennationAngleRef(j,1));
                
    end
    
    measuredForceAlongTendonRefScaled = measuredForceAlongTendonRef ...
                                     ./ measuredForceAlongTendonRef(1,1);
    
    measuredForceRefScaled = measuredForceRef ...
                          ./ measuredForceRef(1,1);
    
    measuredForceVelocityMultiplierAlongTendonRef = ...
      measuredForceVelocityMultiplierRef.*(cos(pennationAngleRef)./cos(pennationAngleRef(1,1)));
    
    fill([0;-measuredFiberVelocityAlongTendonRef;-measuredFiberVelocityAlongTendonRef(end)].*m2mm,...
         [0;measuredForceAlongTendonRefScaled;0].*scaleNormForce,...
         [1,1,1].*0.9,...
         'LineStyle','none',...
         'Handlevisibility','off');
    hold on;
    
    %fill([0;fvCurveSample.x.*(vmax);0].*-m2mm,...
    %     [0;fvCurveSample.y;0].*scaleNormForce,...
    %     [1,1,1].*0.9,...
    %     'LineStyle','none',...
    %     'Handlevisibility','off');
    %hold on;


    if(flag_plotErrorCloud==1)
      setOfPlots(iterPlot).h = errorcloud(setOfPlots(iterPlot).h, ...
                Chino_Fascicle_Velo',...
                    Chino_force',...
                    Chino_force_STD',...
                    Chino_force_STD',...
                    Chino_Fascicle_Velo_STD',...
                    Chino_Fascicle_Velo_STD',...
                    ChinoErrorLineType,...
                    ChinoFillColor,ChinoColor,...
                    ChinoColor,...
                    ChinoLineWidth, ...
                    ChinoLabel);    
      hold on;
    end

    errorbar(Chino_Fascicle_Velo,...
                  Chino_force,...
                  Chino_force_STD,...
                  Chino_force_STD,...
                  Chino_Fascicle_Velo_STD,...
                  Chino_Fascicle_Velo_STD,...
                  ChinoErrorLineType,...
                  'Color',ChinoColor,...
                  'MarkerFaceColor', ChinoColor,...
                  'LineWidth',ChinoLineWidth, ...
                  'MarkerSize',errorBarMarkerSize,...
                  'MarkerEdgeColor',errorBarMarkerEdgeColor,...
                  'CapSize',errorBarCapSize,...
                  'DisplayName',ChinoLabel);

    hold on;

    %k.Marker = '^';
    %k.Color = 'r';
    %k.LineStyle = ':';


    if(flag_plotErrorCloud==1)
      setOfPlots(iterPlot).h = errorcloud(setOfPlots(iterPlot).h, ...
                mean(FSZ_Velocity_Individual,2),...  
                mean(Norm_Muscle_Force_Individual,2),...
                std(Norm_Muscle_Force_Individual,0,2),...
                std(Norm_Muscle_Force_Individual,0,2),...
                std(FSZ_Velocity_Individual,0,2),...
                std(FSZ_Velocity_Individual,0,2),... 
                expErrorLineType,...
                expFillColor,expColor, expColor, expLineWidth,expLabel);             
      hold on;
    end

    plot(Hauraix_Fascicle_Velo,...
         Hauraix_Force_norm,...
         Hauraix2015ErrorLineType,...
        'Color',Hauraix2015Color,...
        'MarkerFaceColor',Hauraix2015Color,...
        'LineWidth',Hauraix2015LineWidth,...
        'MarkerSize',Hauraix2015MarkerSize,...
        'MarkerEdgeColor',errorBarMarkerEdgeColor,...
        'DisplayName',Hauraix15Label);

    hold on

    errorbar( mean(FSZ_Velocity_Individual,2),...  
                  mean(Norm_Muscle_Force_Individual,2),...
                  std(Norm_Muscle_Force_Individual,0,2),...
                  std(Norm_Muscle_Force_Individual,0,2),...
                  std(FSZ_Velocity_Individual,0,2),...
                  std(FSZ_Velocity_Individual,0,2),... 
                  expErrorLineType,...
                  'Color',expColor,...
                  'MarkerFaceColor', expColor,...
                  'LineWidth', expLineWidth,...
                  'MarkerSize',errorBarMarkerSize,...
                  'MarkerEdgeColor',errorBarMarkerEdgeColor,...
                  'CapSize',errorBarCapSize,...
                  'DisplayName',expLabel);

    if(flag_plotFvLine==1)
      plot([fvCurveSample.x.*(vmax)].*-m2mm,...
           [fvCurveSample.y].*scaleNormForce,...
           '-','Color',[1,1,1],...
           'LineWidth',1.5,...
           'Handlevisibility','off');
      hold on;           
    end

    %e.Marker = 'o';
    %e.Color = 'k';
    %e.LineStyle = ':';

    ylim([0 1.1])
    box off;


    xlabel('Fascicle Velocity (mm/s)')
    ylabel('Normalized Torque (\%)')    
    title({'Musculotendon Torque-Velocity Profiles',tendonLabel});

%  end
%%
% Tendon force vs. ankle angular velocity
%%

%  iter = 1;
%  if(iterPlot==2)
%    iter=2;
%  end

%  for w=1:1:iter

    [row,col] = find(subPlotPanelIndex==(idxForceVsOmega));          
     subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
     subplot('Position',subPlotVec); 


    vmax = muscleArch.maximumNormalizedFiberVelocity...
           *muscleArch.optimalFiberLength;
    ankleOmegaRad = -fvCurveSample.x.*(vmax)/ankleAchillesTendonMomentArm;
    ankleOmegaDeg = ankleOmegaRad.*(180/pi);      

    
    fill([0;-measuredAnkleAngularVelocityRef;-measuredAnkleAngularVelocityRef(end)].*rad2deg,...
         [0;measuredForceAlongTendonRefScaled;0].*scaleNormForce,...
         [1,1,1].*0.9,...
         'LineStyle','none',...
         'Handlevisibility','off');
    hold on;    
    
    %fill([0;ankleOmegaDeg;0],...
    %     [0;fvCurveSample.y;0].*scaleNormForce,...
    %     [1,1,1].*0.9,...
    %     'LineStyle','none',...
    %     'Handlevisibility','off');
    %hold on;   


    if(flag_plotErrorCloud==1)
      setOfPlots(iterPlot).h = errorcloud(setOfPlots(iterPlot).h, ...
                Chino_Joint_Velo',...
                Chino_force',...
                Chino_force_STD',...
                Chino_force_STD',...
                Chino_Joint_Velo_STD',...
                Chino_Joint_Velo_STD',...
                ChinoErrorLineType,...
                ChinoFillColor,ChinoColor,...
                ChinoColor,...
                ChinoLineWidth, ...
                'Chino 2008: Preload');    
      hold on;   
    end

    k = errorbar( Chino_Joint_Velo,...
                  Chino_force,...
                  Chino_force_STD,...
                  Chino_force_STD,...
                  Chino_Joint_Velo_STD,...
                  Chino_Joint_Velo_STD,...
                  ChinoErrorLineType,...
                  'Color',ChinoColor, ...
                  'MarkerFaceColor', ChinoColor,...
                  'LineWidth',ChinoLineWidth,...
                  'MarkerSize',errorBarMarkerSize,...
                  'MarkerEdgeColor',errorBarMarkerEdgeColor,...
                  'CapSize',errorBarCapSize,...
                  'DisplayName', 'Chino 2008: Preload');
    hold on


    if(flag_plotErrorCloud)
      setOfPlots(iterPlot).h = errorcloud(setOfPlots(iterPlot).h, ...
                mean(-Vicon_angular_Velocity,2),...
                mean(Norm_Muscle_Force_Individual,2),...
                std(Norm_Muscle_Force_Individual,0,2),...
                std(Norm_Muscle_Force_Individual,0,2),...
                std(-Vicon_angular_Velocity,0,2),...
                std(-Vicon_angular_Velocity,0,2),...
                expErrorLineType,...
                expFillColor,expColor, expColor, expLineWidth,expLabel);   

      hold on;  
    end

    plot(Hauraix_Joint_Velo,...
      Hauraix_Force_norm,...
      Hauraix2015ErrorLineType,...
     'Color',Hauraix2015Color,...
     'MarkerFaceColor',Hauraix2015Color,...
     'LineWidth',Hauraix2015LineWidth,...
     'MarkerSize',Hauraix2015MarkerSize,...
     'MarkerEdgeColor',errorBarMarkerEdgeColor,...
     'DisplayName',Hauraix15Label);
    hold on;

    errorbar( mean(-Vicon_angular_Velocity,2),...
                  mean(Norm_Muscle_Force_Individual,2),...
                  std(Norm_Muscle_Force_Individual,0,2),...
                  std(Norm_Muscle_Force_Individual,0,2),...
                  std(-Vicon_angular_Velocity,0,2),...
                  std(-Vicon_angular_Velocity,0,2),...
                  expErrorLineType,'Color',...
                  expColor,'MarkerFaceColor',expColor,...
                  'LineWidth',expLineWidth,...
                  'MarkerSize',errorBarMarkerSize,...
                  'MarkerEdgeColor',errorBarMarkerEdgeColor,...
                  'CapSize',errorBarCapSize,...
                  'DisplayName',expLabel);

    %e.Marker = 'o';
    %e.Color = 'k';
    %e.LineStyle = ':';    


    if(flag_plotFvLine==1)
      plot(ankleOmegaDeg,...
           fvCurveSample.y.*scaleNormForce,...
           '-','Color',[1,1,1],...
           'LineWidth',1.5,...
           'Handlevisibility','off');
      hold on;  
    end
    ylim([0 1.1]);  
    box off;


    %legend('Hauraix et al., 2015','current study')
    xlabel('Angular velocity ($^\circ$/s)')
    ylabel('Normalized Torque (\%)')

    
    title({'Musculotendon Force-Velocity Profiles ', tendonLabel});


%%
% Plot fiber kinematics
%%

  [row,col] = find(subPlotPanelIndex==idxFiberLength);          
  subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
  subplot('Position',subPlotVec);  

  errorbar(expLengthVelocity.Preset_Isomed,...
    mean(expLengthVelocity.Data_Length)./holzer2020_optimal_fascicle_length,...
    std(expLengthVelocity.Data_Length)./holzer2020_optimal_fascicle_length,...
    expErrorLineType,...
    'Color',expColor,...
    'MarkerFaceColor',expColor,...
    'LineWidth',expLineWidth,...
    'MarkerSize',errorBarMarkerSize,...
    'MarkerEdgeColor',errorBarMarkerEdgeColor,...
    'CapSize',errorBarCapSize,...
    'DisplayName',expLabel);

  hold on;
  
%%
% Add the simulated data
%%
  
    for i=1:1:length(simDataSets)

      %Load the set and remove the simulation-specific name
      data=load(simDataSets{i});
      headField = fields(data);
      data = data.(headField{1});

      trials = size(data.standardResults.activation,2);
      measurementLength                   = zeros(trials,1);
      measuredForceAlongTendon            = zeros(trials,1);
      measuredForce                       = zeros(trials,1);

      measuredFiberVelocity               = zeros(trials,1);
      measuredFiberVelocityAlongTendon    = zeros(trials,1);
      measuredAnkleAngularVelocity        = zeros(trials,1);
      pennationAngle                      = zeros(trials,1);
      normFiberLength                     = zeros(trials,1);

      measuredForceVelocityMultiplier     = zeros(trials,1);

      measuredFiberWorkAtMeasurement      = zeros(trials,1);
      


      for j=1:1:trials
        %Use interpolation to evaluate the data at the time of the measurement


          measuredForceAlongTendon(j,1) = ...
            interp1(data.detailedResults.simulationTime(:,j), ...
                    data.standardResults.normFiberForceAlongTendon(:,j), ...
                    data.detailedResults.measurementTime(1,j));
        
          measuredForceAlongTendon(j,1) = measuredForceAlongTendon(j,1) ...
            ./data.detailedResults.normFiberForceAlongTendonIsometric(1,j);
                    

          measuredFiberVelocity(j,1) = ...
            interp1( data.detailedResults.simulationTime(:,j), ...
                     data.standardResults.fiberVelocity(:,j), ...
                     data.detailedResults.measurementTime(1,j));

          measuredFiberVelocityAlongTendon(j,1) = ...
            interp1(data.detailedResults.simulationTime(:,j), ...
                    data.standardResults.fiberVelocityAlongTendon(:,j), ...
                    data.detailedResults.measurementTime(1,j));                                         

          measuredAnkleAngularVelocity(j,1) = ...
            interp1(data.detailedResults.simulationTime(:,j), ...
                    data.detailedResults.ankleAngularVelocity(:,j), ...
                    data.detailedResults.measurementTime(1,j));   

          pennationAngle(j,1) = ...
            interp1(data.detailedResults.simulationTime(:,j), ...
                    data.standardResults.pennationAngle(:,j), ...
                    data.detailedResults.measurementTime(1,j));   

          measuredForceVelocityMultiplier(j,1) = ...
            interp1(data.detailedResults.simulationTime(:,j), ...
                    data.standardResults.fiberForceVelocityMultiplier(:,j), ...
                    data.detailedResults.measurementTime(1,j));              

          measuredFiberWorkAtMeasurement(j,1) = ...
            interp1(data.detailedResults.simulationTime(:,j),...
                    data.standardResults.fiberActiveWork(:,j),...
                    data.detailedResults.measurementTime(1,j));
                  
          measuredForce(j,1) = measuredForceAlongTendon(j,1)/cos(pennationAngle(j,1));
                  
      end





        %%
        % R^2 ankle angular velocity vs. fascicle velocity
        %%


        if(flag_plotSimOmegaVsVelocity==1)
          [row,col] = find(subPlotPanelIndex==idxOmegaVsVel);          
          subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
          subplot('Position',subPlotVec);    
          if(simDataPlotWhiteOutline(1,i)==1)
            plot(measuredAnkleAngularVelocity.*(-rad2deg),...
                 measuredFiberVelocityAlongTendon.*(-m2mm), ...                 
                  '-',...        
                  'Color', [1,1,1],...
                  'LineWidth',simDataSetLineWidth(1,i)*2,...        
                  'HandleVisibility','off');
            hold on;
          end
          plot( measuredAnkleAngularVelocity.*(-rad2deg),...
                measuredFiberVelocityAlongTendon.*(-m2mm), ...                
                simDataSetLineType{i},...        
                'Color', simDataSetColor(i,:),...
                'LineWidth',simDataSetLineWidth(1,i),...        
                'DisplayName',simDataSetName{i});
          hold on;
        end


        %%
        % Tendon force vs. fascicle velocity
        %%

          [row,col] = find(subPlotPanelIndex==(idxForceVsVel));          
          subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
          subplot('Position',subPlotVec); 

          if(simDataPlotWhiteOutline(1,i)==1)
            plot(measuredFiberVelocityAlongTendon.*(-m2mm), ...
                 measuredForceAlongTendon.*scaleNormForce, ...
                 '-',...  
                  'Color',[1,1,1],...        
                  'LineWidth',simDataSetLineWidth(1,i).*2,...        
                  'HandleVisibility','off');
            hold on;  
          end

          plot(measuredFiberVelocityAlongTendon.*(-m2mm), ...
               measuredForceAlongTendon.*scaleNormForce, ...
               simDataSetLineType{i},...  
                'Color',simDataSetColor(i,:),...        
                'LineWidth',simDataSetLineWidth(1,i),...        
                'DisplayName',simDataSetName{i});
          hold on;

          if(i==1)
            ht=text(180,0,'Rigid Tendon Model',...
                 'HorizontalAlignment','Right',...
                 'VerticalAlignment','Bottom');       
            hold on;
            %set(ht,'Rotation',-10);
            %hold on;
          end


        %%
        % Tendon force vs. ankle angular velocity
        %%

          [row,col] = find(subPlotPanelIndex==(idxForceVsOmega));          
          subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
          subplot('Position',subPlotVec);    

          if(simDataPlotWhiteOutline(1,i)==1)
            plot( measuredAnkleAngularVelocity.*(-rad2deg),...
                  measuredForceAlongTendon.*scaleNormForce,...
                  '-',...
                  'Color',[1,1,1],...        
                  'LineWidth',simDataSetLineWidth(1,i)*2,...
                  'HandleVisibility','off');
            hold on;  
          end  
          plot( measuredAnkleAngularVelocity.*(-rad2deg),...
                measuredForceAlongTendon.*scaleNormForce,...
                simDataSetLineType{i},...
                'Color',simDataSetColor(i,:),...        
                'LineWidth',simDataSetLineWidth(1,i),...
                'DisplayName',simDataSetName{i});
          hold on;

          if(i==1)
            ht=text(200,0,'Rigid Tendon Model',...
                 'HorizontalAlignment','Right',...
                 'VerticalAlignment','Bottom');       
            hold on;
            %set(ht,'Rotation',-10);
            %hold on;

          end


    end

    %%
    % Generate the velocity decomposition plots
    %%
    for i=1:1:length(simDataSets)


      flag_preload=0;
      tagPreload = simDataSetTag{i};
      %if(contains(simDataSets{i},'preload_1')==1)
      %  flag_preload=1;
      %  tagPreload = ' (Pre)';
      %end


      %Load the set and remove the simulation-specific name
      data=load(simDataSets{i});
      headField = fields(data);
      data = data.(headField{1});

      trials = size(data.standardResults.activation,2);
      measuredForceAlongTendon            = zeros(trials,1);
      measuredFiberVelocityAlongTendon    = zeros(trials,1);
      measuredFiberVelocity               = zeros(trials,1);
      measuredTendonVelocity              = zeros(trials,1);
      measuredPathVelocity                = zeros(trials,1);
      measuredPennationAngle              = zeros(trials,1);
      measuredNormFiberLength             = zeros(trials,1);
      startNormFiberLength                = zeros(trials,1);
      endNormFiberLength                  = zeros(trials,1);

      measuredPassiveFiberForceAlongTendon= zeros(trials,1);                  
      measuredActivation             = zeros(trials,1);
      measuredForceVelocityMultiplier= zeros(trials,1);
      measuredActiveForceLengthMultiplier= zeros(trials,1);
      measuredPassiveForceLengthMultiplier= zeros(trials,1);
      measuredNormDamping= zeros(trials,1);

      for j=1:1:trials
        %Use interpolation to evaluate the data at the time of the measurement


          measuredForceAlongTendon(j,1) = ...
            interp1(data.detailedResults.simulationTime(:,j), ...
                    data.standardResults.normFiberForceAlongTendon(:,j), ...
                    data.detailedResults.measurementTime(1,j));              

          measuredFiberVelocityAlongTendon(j,1) = ...
            interp1(data.detailedResults.simulationTime(:,j), ...
                    data.standardResults.fiberVelocityAlongTendon(:,j), ...
                    data.detailedResults.measurementTime(1,j));  

          measuredFiberVelocity(j,1) = ...
            interp1(data.detailedResults.simulationTime(:,j), ...
                    data.standardResults.fiberVelocity(:,j), ...
                    data.detailedResults.measurementTime(1,j));                  
                  
          measuredTendonVelocity(j,1) = ...
            interp1(data.detailedResults.simulationTime(:,j), ...
                    data.standardResults.tendonVelocity(:,j), ...
                    data.detailedResults.measurementTime(1,j));                

          measuredPathVelocity(j,1) = ...
            interp1(data.detailedResults.simulationTime(:,j), ...
                    data.standardResults.pathVelocity(:,j), ...
                    data.detailedResults.measurementTime(1,j));                

          measuredPennationAngle(j,1) = ...
            interp1(data.detailedResults.simulationTime(:,j), ...
                    data.standardResults.pennationAngle(:,j), ...
                    data.detailedResults.measurementTime(1,j));   

          measuredNormFiberLength(j,1) = ...
            interp1(data.detailedResults.simulationTime(:,j), ...
                    data.standardResults.normFiberLength(:,j), ...
                    data.detailedResults.measurementTime(1,j));                 

          startNormFiberLength(j,1) = data.standardResults.normFiberLength(1,j);          
          endNormFiberLength(j,1) = data.standardResults.normFiberLength(end,j);          


          measuredPassiveFiberForceAlongTendon(j,1)=...
            interp1(data.detailedResults.simulationTime(:,j), ...
                    data.standardResults.passiveFiberForceAlongTendon(:,j), ...
                    data.detailedResults.measurementTime(1,j));  

          measuredActivation(j,1) = ...
            interp1(data.detailedResults.simulationTime(:,j), ...
                    data.standardResults.activation(:,j), ...
                    data.detailedResults.measurementTime(1,j));    

          measuredForceVelocityMultiplier(j,1) = ...
            interp1(data.detailedResults.simulationTime(:,j), ...
                    data.standardResults.fiberForceVelocityMultiplier(:,j), ...
                    data.detailedResults.measurementTime(1,j));

          measuredActiveForceLengthMultiplier(j,1) = ...
            interp1(data.detailedResults.simulationTime(:,j), ...
                    data.standardResults.fiberActiveForceLengthMultiplier(:,j), ...
                    data.detailedResults.measurementTime(1,j));

          measuredNormDamping(j,1) = ...
            interp1(data.detailedResults.simulationTime(:,j), ...
                    data.standardResults.normDamping(:,j), ...
                    data.detailedResults.measurementTime(1,j));              
      end    

        [row,col] = find(subPlotPanelIndex==(idxVelocityDecomposition));          
        subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
        subplot('Position',subPlotVec);   

        if(i==1)  
          plot([0,300],[0,0],'-','Color',[1,1,1].*0.75,'LineWidth',1,...
              'HandleVisibility','off');
          hold on;
          text(94, 6.,'Shortening','HorizontalAlignment','Center');
          hold on;
          text(94,-6.,'Lengthening','HorizontalAlignment','Center');
          hold on;
        end

        xStart = measuredPathVelocity(1,1).*(-m2mm);
        xLabelStretchFactor=1.;
        if(flag_tendonType==3)
          xLabelStretchFactor= (j-1)*0.05+1;
        end
        xEnd   = measuredPathVelocity(end,1).*(-m2mm*xLabelStretchFactor);
        xDelta = (xEnd-xStart)*0.05;
        yDeltaStatic = 5;

        plot(measuredPathVelocity.*(-m2mm),...
             measuredFiberVelocityAlongTendon.*(-m2mm),...
             simDataSetLineType{i},...
             'Color',simDataSetColor(i,:),...        
             'LineWidth',simDataSetLineWidth(1,i),...
             'DisplayName',[simDataSetName{i},' (Fiber Vel. AT)']);
        hold on;

        ht=text(xEnd, measuredFiberVelocityAlongTendon(end,1).*(-m2mm)-yDeltaStatic,...
             ['$$v_{\mathrm{AT}}^{CE}$$ ',tagPreload],...
             'VerticalAlignment','Top','HorizontalAlignment','Right',...
             'Color',simDataSetColor(i,:));  

        dy= measuredFiberVelocityAlongTendon(end,1).*(-m2mm)...
           -measuredFiberVelocityAlongTendon(end-1,1).*(-m2mm);
        dx = measuredPathVelocity(end,1).*(-m2mm) ...
            -measuredPathVelocity(end-1,1).*(-m2mm);
        textAngle = atan2(dy,dx)*(180/pi);

        %set(ht,'Rotation',textAngle);

        plot(measuredPathVelocity.*(-m2mm),...s
            measuredTendonVelocity.*(-m2mm),...
            simDataSetLineType{i},...
           'Color',[1,0,0],...        
           'LineWidth',simDataSetLineWidth(1,i),...
           'DisplayName',[simDataSetName{i}, ' (Tendon Vel.)']);
        hold on;  

        ht=text(xEnd-xDelta, measuredTendonVelocity(end,1).*(-m2mm),...
             ['$$v^{T}$$ ',tagPreload],...
             'VerticalAlignment','Bottom','HorizontalAlignment','Right',...
             'Color',[1,0,0]);  

        dy= measuredTendonVelocity(end,1).*(-m2mm)...
           -measuredTendonVelocity(end-1,1).*(-m2mm);
        textAngle = atan2(dy,dx)*(180/pi);     
        %set(ht,'Rotation',textAngle);


        box off;

        if(i==1)
          xlabel('Path Shortening Velocity (mm/s)');
          ylabel('Shortening Velocity (mm/s)'); 
          title({'Path Velocity Decomposition',tendonLabel},...
                  'HorizontalAlignment', 'center',...
                  'VerticalAlignment','middle');
        end

        maxPathVelocityMM = max(measuredPathVelocity.*(-m2mm));
        maxFiberVelocityMM = measuredFiberVelocityAlongTendon(end,1).*(-m2mm);
        plot([maxPathVelocityMM,maxPathVelocityMM],...
             [maxFiberVelocityMM,(maxFiberVelocityMM+dy)],'-k','LineWidth',0.5);
        hold on;

        txtH = text(maxPathVelocityMM,maxFiberVelocityMM+dy,...
              sprintf('%1.0f mm/s',maxFiberVelocityMM),...
              'FontSize',8,...
              'VerticalAlignment','bottom','HorizontalAlignment','left');
        hold on;


        if(flag_preload==1)
          minPathVelocity = min(measuredPathVelocity);
          maxPathVelocity = max(measuredPathVelocity);
          errorAtMinVelocity = calcFiberTendonVelocityDifference(minPathVelocity,...      
                                        measuredPathVelocity, ...
                                        measuredFiberVelocityAlongTendon,...
                                        measuredTendonVelocity);
          errorAtMaxVelocity = calcFiberTendonVelocityDifference(maxPathVelocity,...      
                                        measuredPathVelocity, ...
                                        measuredFiberVelocityAlongTendon,...
                                        measuredTendonVelocity);    

          %There is a crossing where the fiber and tendon velocities are equal.
          %Use the bisection method to solve for it.
          if(errorAtMinVelocity*errorAtMaxVelocity <= 0)
            v = 0.5*(minPathVelocity+maxPathVelocity);
            dv= 0.25*(maxPathVelocity-minPathVelocity);
            vBest = v;
            errBest = calcFiberTendonVelocityDifference(v,...      
                                        measuredPathVelocity, ...
                                        measuredFiberVelocityAlongTendon,...
                                        measuredTendonVelocity);

            for z=1:1:10
              vL = v-dv;
              vR = v+dv;
              errL = calcFiberTendonVelocityDifference(vL,...      
                                          measuredPathVelocity, ...
                                          measuredFiberVelocityAlongTendon,...
                                          measuredTendonVelocity);
              errR = calcFiberTendonVelocityDifference(vR,...      
                                          measuredPathVelocity, ...
                                          measuredFiberVelocityAlongTendon,...
                                          measuredTendonVelocity);

              if(abs(errL) < abs(errBest) && abs(errL) <= abs(errR))
                errBest = errL;
                v = vL;
              elseif(abs(errR) < abs(errBest) && abs(errR) < abs(errL))
                errBest = errR;
                v = vR;
              end
              dv = dv*0.5;

            end

            vel = interp1(measuredPathVelocity,measuredFiberVelocityAlongTendon,v);
            vel = -vel*m2mm;
            vmm = -v*m2mm;
            vdeg=-(v/standardMomentArm)*(180/pi);      

            disp('Plot D: Path velocity decomposition');
            disp('  Under the preload condition the');
            disp('  Fiber Velocity (AT) and tendon velocity are equal at');
            fprintf('  %1.1f mm/s  (error: %1.3e mm/s)\n',...
                    vmm, abs(errBest)*m2mm);
            fprintf('  %1.1f deg/s (error: %1.3e deg/s)\n\n',...
                    vdeg, ...
                    abs(errBest/standardMomentArm)*(180/pi));

            dv = 0.1*(max(measuredPathVelocity)-min(measuredPathVelocity));
            dv = dv*m2mm;
            plot([v*(-m2mm),v*(-m2mm)],[vel,vel+dv],'-k','LineWidth',0.5);
            hold on;
            txtH = text(v*(-m2mm),vel+dv,...
              [sprintf('%1.0f mm/s (%1.0f',vmm,vdeg),'$$^\circ/s$$)'],...
              'FontSize',8,...
              'VerticalAlignment','bottom','HorizontalAlignment','center');
            hold on;
            set(txtH, 'Rotation',12.5);      

            here=1;
          end
        else

          %Solve for the velocity at which the tendon moves from shortening
          %to lengthening

          [uniqueValues,idxUniqueUnsorted,idxRepeated] = unique(measuredPathVelocity,'rows');
          idxUnique = sort(idxUniqueUnsorted);
          measuredTendonVelocityUnique  = measuredTendonVelocity(idxUnique,1);
          measuredPathVelocityUnique    = measuredPathVelocity(idxUnique,1);

          minTendonVelocity = min(measuredTendonVelocityUnique);
          maxTendonVelocity = max(measuredTendonVelocityUnique);


          if(minTendonVelocity*maxTendonVelocity < 0)
            minPathVelocity = min(measuredPathVelocityUnique);
            maxPathVelocity = max(measuredPathVelocityUnique);      
            v = 0.5*(minPathVelocity+maxPathVelocity);
            dv= 0.25*(maxPathVelocity-minPathVelocity);
            errBest = interp1(measuredPathVelocityUnique,measuredTendonVelocityUnique,v);
            vBest = v;

            for z=1:1:10
              vL = v-dv;
              vR = v+dv;
              errL = interp1(measuredPathVelocityUnique,measuredTendonVelocityUnique,vL);
              errR = interp1(measuredPathVelocityUnique,measuredTendonVelocityUnique,vR);

              if(abs(errL) < abs(errBest) && abs(errL) <= abs(errR))
                errBest = errL;
                v = vL;
              elseif(abs(errR) < abs(errBest) && abs(errR) < abs(errL))
                errBest = errR;
                v = vR;
              end
              dv = dv*0.5;

            end

            vmm = -v*m2mm;
            vdeg=-(v/standardMomentArm)*(180/pi);

            disp('Plot D: Path velocity decomposition');
            disp('  Under the non-preload condition the');
            disp('  tendon begins lengthening at');
            fprintf('  %1.1f mm/s  (error: %1.3e mm/s)\n',...
                    vmm, abs(errBest)*m2mm);
            fprintf('  %1.1f deg/s (error: %1.3e deg/s)\n\n',...
                    vdeg, ...
                    abs(errBest/standardMomentArm)*(180/pi));

            dv = 0.1*(max(measuredPathVelocityUnique)-min(measuredPathVelocityUnique));
            dv = dv*m2mm;

            plot([vmm,vmm],[0,-dv],'-k','LineWidth',0.5);
            hold on;
            text(v*(-m2mm),-dv,...
              [sprintf('%1.0f mm/s (%1.0f',vmm,vdeg),'$$^\circ/s$$)'],...
              'FontSize',8,...
              'VerticalAlignment','top','HorizontalAlignment','center');

          end


        end




      %%
      % Plot fiber kinematics
      %%

        [row,col] = find(subPlotPanelIndex==idxFiberLength);          
        subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
        subplot('Position',subPlotVec);  
        %yyaxis left;

        xStart = measuredPathVelocity(1,1).*(-m2mm);
        xEnd   = measuredPathVelocity(end,1).*(-m2mm);


        plot(measuredPathVelocity.*(-m2mm),...
            measuredNormFiberLength,...
            simDataSetLineType{i},...
           'Color',[0,0,0]./255,...        
           'LineWidth',simDataSetLineWidth(1,i),...
           'DisplayName',[simDataSetName{i}, ' (Norm. Fiber Length)']);
        hold on;  

        clrA = [1,1,1];
        if(i==1)
          clrA = [1,0.75,0.75];    
        else
          clrA = [0.75,0.75,1];    
        end

%           plot(measuredPathVelocity.*(-m2mm),...
%               startNormFiberLength,...
%               simDataSetLineType{i},...
%              'Color',simDataSetColor(i,:).*0.75+clrA.*0.25,...        
%              'LineWidth',simDataSetLineWidth(1,i),...
%              'DisplayName',[simDataSetName{i}]);
%           hold on;  
% 
%           plot(measuredPathVelocity.*(-m2mm),...
%             endNormFiberLength,...
%              simDataSetLineType{i},...
%              'Color',simDataSetColor(i,:).*0.25+clrA.*0.75,...        
%              'LineWidth',simDataSetLineWidth(1,i),...
%              'DisplayName',[simDataSetName{i}]);
%           hold on;  

        text(xEnd, measuredNormFiberLength(end,1),...
           ['$$\tilde{\ell}^{M}$$',tagPreload],...
           'VerticalAlignment','Bottom','HorizontalAlignment','Right',...
           'Color',[0,0,0]);

        box off;

        if(i==1)
          xlabel('Path Shortening Velocity (mm/s)');
          ylabel('Normalized Fiber Length ($$\ell^{\mathrm{CE}}/\ell^{\mathrm{CE}}_{\circ}$$)');    
          title({'Normalized fiber length at a $0^\circ$ ankle angle',tendonLabel});
        end
        ylim([0,1.1]);   
%          yyaxis right;

%           plot(measuredPathVelocity.*(-m2mm),...
%               measuredPennationAngle.*(180/pi),...
%               simDataSetLineType{i},...
%              'Color',[255,102,0]./255,...        
%              'LineWidth',simDataSetLineWidth(1,i),...
%              'DisplayName',[simDataSetName{i}, ' (Pennation Angle)']);
%           hold on;  

%           text(xEnd, measuredPennationAngle(end).*(180/pi),...
%              ['$$\alpha$$',tagPreload],...
%              'VerticalAlignment','Bottom','HorizontalAlignment','Right',...
%              'Color',[255,102,0]./255);
%           if(i==1)
%             ylabel('Pennation Angle (deg)');
%           end
%           ylim([0,20]); 
%           yyaxis left;  
        box off;


      %%
      % Plot multipliers
      %%
        [row,col] = find(subPlotPanelIndex==idxMultipliers);          
        subPlotVec = reshape(subPlotPanel(row,col,:),1,4); 

        xStart= measuredPathVelocity(1,1).*(-m2mm);
        xEnd  = measuredPathVelocity(end,1).*(-m2mm);
        xDelta = (xEnd-xStart)*0.1;
        yDelta = 0.075;
        yDeltaFixed=yDelta;
        xDeltaFixed=2*xDelta;
        if(mod(i,2)==0)
          xDelta=0;
          yDelta=0;
        end

        subplot('Position',subPlotVec);  

        plot(measuredPathVelocity.*(-m2mm),...
            measuredActiveForceLengthMultiplier-yDelta,...
            simDataSetLineType{i},...
           'Color',[1,0,0],...        
           'LineWidth',simDataSetLineWidth(1,i),...
           'DisplayName',[simDataSetName{i}, ' (fal)']);
        hold on;  

        text(xEnd, measuredActiveForceLengthMultiplier(end,1)-yDelta,...
             ['$$f^{L}(\tilde{\ell}^{CE})$$',tagPreload],...
             'VerticalAlignment','Bottom','HorizontalAlignment','Right',...
             'Color',[1,0,0]);

        plot(measuredPathVelocity.*(-m2mm),...
            measuredPassiveForceLengthMultiplier,...
            simDataSetLineType{i},...
           'Color',[0,0,1],...        
           'LineWidth',simDataSetLineWidth(1,i),...
           'DisplayName',[simDataSetName{i}, ' (fpe)']);
        hold on;  

        text(xEnd-xDelta-xDeltaFixed, ...
              measuredPassiveForceLengthMultiplier(end,1)-yDelta,...
             ['$$f^{PE}(\tilde{\ell}^{CE})$$',tagPreload],...
             'VerticalAlignment','Bottom','HorizontalAlignment','Right',...
             'Color',[0,0,1]);


        plot(measuredPathVelocity.*(-m2mm),...
            measuredForceVelocityMultiplier,...
            simDataSetLineType{i},...
           'Color',[0,0,0],...        
           'LineWidth',simDataSetLineWidth(1,i),...
           'DisplayName',[simDataSetName{i}, ' (fv)']);
        hold on;  

        text(xEnd, measuredForceVelocityMultiplier(end,1)-yDelta,...
             ['$$f^{V}(\tilde{v}^{CE})$$',tagPreload],...
             'VerticalAlignment','Bottom','HorizontalAlignment','Right',...
             'Color',[0,0,0]);

        plot(measuredPathVelocity.*(-m2mm),...
            measuredNormDamping,...
            simDataSetLineType{i},...
           'Color',[0,1,1],...        
           'LineWidth',simDataSetLineWidth(1,i),...
           'DisplayName',[simDataSetName{i}, ' (damping)']);
        hold on;   

        plot(measuredPathVelocity.*(-m2mm),...
            measuredActivation,...
            simDataSetLineType{i},...
           'Color',[1,1,1].*0.5,...        
           'LineWidth',simDataSetLineWidth(1,i),...
           'DisplayName',[simDataSetName{i}, ' (act)']);
        hold on;   


        text(xEnd-xDelta, measuredNormDamping(end,1)-yDelta,...
             ['$$\tilde{v}^{CE}\,\beta$$',tagPreload],...
             'VerticalAlignment','Bottom','HorizontalAlignment','Right',...
             'Color',[0,1,1]);

        box off;    
        if(i==1)
          xlabel('Path Shortening Velocity (mm/s)');
          ylabel('Multipliers');    
          title({'Damped Hill Model Multipliers',tendonLabel});

        end    



    end

for i=1:1:length(simDataSets)

    %Load the set and remove the simulation-specific name
    data      = load(simDataSets{i});
    headField = fields(data);
    data      = data.(headField{1});
    
    
    trials = size(data.standardResults.activation,2);

    measuredAnkleAngularVelocity        = zeros(trials,1);
    measuredFiberWorkAtMeasurement      = zeros(trials,1);
    
    for j=1:1:trials
      
        measuredAnkleAngularVelocity(j,1) = ...
          interp1(data.detailedResults.simulationTime(:,j), ...
                  data.detailedResults.ankleAngularVelocity(:,j), ...
                  data.detailedResults.measurementTime(1,j));   
                  
        measuredFiberWorkAtMeasurement(j,1) = ...
          interp1(data.detailedResults.simulationTime(:,j),...
                  data.standardResults.fiberActiveWork(:,j),...
                  data.detailedResults.measurementTime(1,j));
                
        potentialEnergy0 =  ...
            data.standardResults.tendonPotentialEnergy(1,1);
        if(data.standardResults.activation(1,1) < 0.001)
          potentialEnergy0=0;
        end
        
        measuredFiberWorkAtMeasurement(j,1) = ...
          measuredFiberWorkAtMeasurement(j,1) ...
          + potentialEnergy0;
        
        %measuredFiberWorkAtMeasurement(j,1) = ...
        %  measuredFiberWorkAtMeasurement(j,1)+ ;
    end

    
    
    fprintf('%s\n\t%e J\t%e deg/s\n\t%e J\t%e deg/s\n',...
            [simDataSetName{i},tendonStr],...
            measuredFiberWorkAtMeasurement(1,1),...
            measuredAnkleAngularVelocity(1,1).*(-rad2deg),...
            measuredFiberWorkAtMeasurement(end,1),...
            measuredAnkleAngularVelocity(end,1).*(-rad2deg));
    
    baseColor = simDataSetColorAlt(i,:);    
    
    [row,col] = find(subPlotPanelIndex==idxWorkAtMeasurement);          
    subPlotVec = reshape(subPlotPanel(row,col,:),1,4); 
    subplot('Position',subPlotVec);       
    
    plot( measuredAnkleAngularVelocity.*(-rad2deg),...
          measuredFiberWorkAtMeasurement,...
          '-',...
          'Color',baseColor,...        
          'LineWidth',simDataSetLineWidth(1,i),...
          'DisplayName',simDataSetName{i});
               
    hold on;
    
    dy = 2;
    if(i==2)
      dy = dy*-1;
    end
    
    text( measuredAnkleAngularVelocity(1,1).*(-rad2deg),...
          measuredFiberWorkAtMeasurement(1,1)+dy,...
          [num2str(round(measuredFiberWorkAtMeasurement(1,1),1)),'J'],...
          'Color',baseColor');
          
    hold on;
    
    text( measuredAnkleAngularVelocity(end,1).*(-rad2deg),...
          measuredFiberWorkAtMeasurement(end,1)+dy,...
          [num2str(round(measuredFiberWorkAtMeasurement(end,1),1)),'J'],...
          'Color',baseColor');
          
    hold on;
    
    box off;    
    if(i==1)
      xlabel('Angular Velocity ($^\circ$/s)','Interpreter','latex');  
      ylabel('Work ($$J$$)');    
      title({'Active CE work to sample',tendonLabel});
    end
    
    if(i==length(simDataSets) && length(simDataSets)==2)
      [row,col] = find(subPlotPanelIndex==idxProportionWorkAB);          
      subPlotVec = reshape(subPlotPanel(row,col,:),1,4); 
      subplot('Position',subPlotVec);  
      
      
      workFraction = (measuredFiberWorkAtMeasurement ...
                     ./ measuredFiberWorkAtMeasurementPrev).*100;
      
      plot(measuredAnkleAngularVelocity.*(-rad2deg),...
          workFraction,...
          '-','Color',[0,0,0],'LineWidth',1);
      hold on;

      xlabel('Angular Velocity ($^\circ$/s)','Interpreter','latex');  
      ylabel('Percent ($$\%$$)');    
      title({'Preloaded / non-preloaded work',tendonLabel});
      
      text(measuredAnkleAngularVelocity(1,1).*(-rad2deg),...
           workFraction(1,1)-20,...
           [num2str( round(workFraction(1,1),1)),'\%'],...
           'HorizontalAlignment','left',...
           'Interpreter','latex');
      hold on;
      text(measuredAnkleAngularVelocity(end,1).*(-rad2deg),...
           workFraction(end,1)-20,...
           [num2str( round(workFraction(end,1),1)),'\%'],...
           'HorizontalAlignment','right',...
           'Interpreter','latex');
      hold on;
      
      box off;
    
    end    
    idxWork=0;
    switch i
      case 1
        idxWork=idxTotalWorkA;
      case 2
        idxWork=idxTotalWorkB;   
      case 3
        idxWork=idxTotalWorkB;
      otherwise
        assert(0);
    end
      
    
    [row,col] = find(subPlotPanelIndex==idxWork);          
    subPlotVec = reshape(subPlotPanel(row,col,:),1,4); 
    subplot('Position',subPlotVec);       

    baseColor2 = baseColor.*0.125 + ([1,1,1].*(1-0.25));
    for j=1:1:trials
    
      n = (j-1)/(trials-1);
      lineColor = baseColor.*(1-n) + baseColor2.*n;
      
      potentialEnergy0 = data.standardResults.tendonPotentialEnergy(1,1);
      if(data.standardResults.activation(1,1) < 0.001)
        potentialEnergy0=0;
      end
      
      
      plot( data.detailedResults.ankleAngle(:,j).*(rad2deg),...
            data.standardResults.fiberActiveWork(:,j)+potentialEnergy0,...
            '-',...
            'Color',lineColor,...        
            'LineWidth',simDataSetLineWidth(1,i),...
            'DisplayName',simDataSetName{i});

      hold on;         
    end
    
    plot([75,77.5],[workMax,workMax].*0.9,'Color',baseColor);
    hold on;
    
    text(80, workMax*0.9, simDataSetName{i});
    hold on;
    
    xlabel('Angle ($^\circ$)','Interpreter','latex');  
    ylabel('Work ($$J$$)');
    title({'Active CE Work',tendonLabel});
    box off
    
    measuredFiberWorkAtMeasurementPrev = measuredFiberWorkAtMeasurement;
end

for i=1:1:length(subplotList)

    [row,col] = find(subPlotPanelIndex==(subplotList(i,1)));          
    subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
    subplot('Position',subPlotVec);    
    if(simDataAddLegend(1,i)==1)
      legend('Location',simDataLegendPosition{i});
      legend boxoff;
    end

    xticks(subplotTicks(i).xticks);
    yticks(subplotTicks(i).yticks);  

    xlim(subplotXlim(i,:));
    ylim(subplotYlim(i,:));
end

figure(fig_Pub); 
configPlotExporter;
print('-dpdf',[outputFolder,outputFileName]); 



