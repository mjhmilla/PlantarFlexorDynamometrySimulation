clc;
close all;
clear all;

dataFolder = '../data/';
outputFolder = '../plots/';
outputFileName = 'fig_ForceVelocity_Simulation_Vs_Experiment.pdf';


expData = '../data/Own_Study.xlsx'; 



%This was called `path' before: this is also the name of a Matlab's
%search path: do not make variables with the same name. Matlab should 
%give you an error, but it doesn't, it just silently lets you overwrite
%an important internal varible

simDataSets = {'../data/simFv_gaslat_preload_1_dampedFiberElasticTendon.mat',...
              '../data/simFv_gaslat_preload_0_dampedFiberElasticTendon.mat'};
             
simDataSetName = {'Sim.: Preload',...
                  'Sim.: Slack'};      
                
 
%simDataSetColor = [0.5,0.5,0.5;...
%                   0.85,0.85,0.85];                
                
simDataSetColor  = [0,0,0; ...
                    0,0.00,0.00]./255;
               
simDataSetLineType = {'-','--'};                  

simDataPlotWhiteOutline = [0,1];

simDataSetLineWidth= [2.0,0.5];

load([dataFolder,'normMuscleCurves.mat']);
load([dataFolder,'muscleArch.mat']);

fvCurveSample = calcBezierYFcnXCurveSampleVector(...
                normMuscleCurves.fiberForceVelocityCurve, 500);

%%
% Subplot Configuration
%%

scaleNormForce =  100;

ankleAchillesTendonMomentArm = 0.054; %moment arm in m
%from Rugg et al.

omegaMaxDeg = 200;
m2mm = 1000;
velMaxMM    = (omegaMaxDeg*(pi/180))*ankleAchillesTendonMomentArm*m2mm;

idxOmegaVsVel=1;
idxForceVsVel=3;
idxForceVsOmega=5;

idxVelocityDecomposition = 2;
idxFiberLength=4;
idxMultipliers=6;

subplotList = [idxOmegaVsVel;...
               idxForceVsVel;...
               idxForceVsOmega;...
               idxVelocityDecomposition;...
               idxFiberLength;...
               idxMultipliers];

subplotXlim = [0,velMaxMM.*1.05;...
               0,velMaxMM.*1.05;...
               0,omegaMaxDeg.*1.05;...
               0,velMaxMM.*1.05;...
               0,velMaxMM.*1.05;...
               0,velMaxMM.*1.05];
             
subplotYlim = [0,omegaMaxDeg.*1.1;...
               0,1.1.*scaleNormForce;...
               0,1.1.*scaleNormForce;...
  -velMaxMM.*0.2,velMaxMM.*1.10;...
               0,1.1;...
               -0.1,1.1];

omegaDegTicks     = round([0:0.125:1].*omegaMaxDeg,0);             
velMMTicks        = round([0:0.125:1].*velMaxMM,0);             
forcePercentTicks = round([0:0.25:1].*100,0);

subplotTicks(3) =struct('xticks',[],'yticks',[]);
subplotTicks(1).xticks = velMMTicks;
subplotTicks(1).yticks = omegaDegTicks;

subplotTicks(2).xticks = velMMTicks;
subplotTicks(2).yticks = forcePercentTicks;

subplotTicks(3).xticks = omegaDegTicks;
subplotTicks(3).yticks = forcePercentTicks;

subplotTicks(4).xticks = round([     0:0.125:1.125].*velMaxMM,0);
subplotTicks(4).yticks = round([-0.125:0.125:1.125].*velMaxMM,0);

subplotTicks(5).xticks = round([     0:0.125:1.125].*velMaxMM,0);
subplotTicks(5).yticks = round([0:0.1:1.1],1);

subplotTicks(6).xticks = round([     0:0.125:1.125].*velMaxMM,0);
subplotTicks(6).yticks = round([0:0.1:1.1],1);

simDataLegendPosition = {'SouthEast','NorthEast','SouthWest','NorthWest',...
                         'SouthEast','SouthWest'};

%%
% Individual Data Series Configuration
%%

flag_plotExpMeanLine = 0;

greyFill1 = [1,1,1].*0.75;
greyFill2 = [1,1,1].*0.9;

expColor = [1,1,1].*0.5;
expFillColor = expColor.*0.25 + greyFill1.*(0.75);
expLineWidth = 1;
expErrorLineType = 'o';

ChinoColor = [1,0.65,1];
ChinoFillColor = ChinoColor.*0.25+greyFill2.*0.75;
ChinoLineWidth = 1.5;
ChinoErrorLineType = '^';
ChinoLineType = '-';


Hauraix2015Color        = [0.5,0.5,1]; 
Hauraix2015FillColor    = Hauraix2015Color.*0.25 + greyFill2.*0.75; 
Hauraix2015LineWidth= 1.; 
Hauraix2015ErrorLineType = 's--';
Hauraix2015LineType = '--';

Hauraix2013Color      = [0.75,0.75,1]; 
Hauraix2013FillColor  = Hauraix2013Color.*0.25 + greyFill2.*0.75;
Hauraix2013LineWidth= 0.5; 
Hauraix2013ErrorLineType = 'd--';
Hauraix2013LineType = '--';

if(flag_plotExpMeanLine ==1)
  expErrorLineType = [expErrorLineType,':'];
  ChinoErrorLineType = [ChinoErrorLineType,':'];
  Hauraix2015ErrorLineType = [Hauraix2015ErrorLineType,':'];
  Hauraix2013ErrorLineType = [Hauraix2013ErrorLineType,':'];
  
end


%%
% Plot configuration
%%



numberOfFiguresPerPage        = 6;
numberOfVerticalPlotRows      = 3;
numberOfHorizontalPlotColumns = 2;    
assert(numberOfVerticalPlotRows*numberOfHorizontalPlotColumns ...
         >= numberOfFiguresPerPage);

plotHorizMarginCm = 2;
plotVertMarginCm  = 2;           
pageHeight  = 29.7;
pageWidth   = 21.0;           
plotHeight  = 8;
plotWidth   = 10;

plotConfigGeneric;

fig_Fv = figure;

%%
% Tabulated experimental data
%%

Norm_Muscle_Force_Individual = xlsread(expData,'Muscle_Force_Individual').*scaleNormForce;
Vicon_angular_Velocity = xlsread(expData,'Vicon_angular_Velocity');
FSZ_Velocity_Individual = xlsread(expData,'Velocity_Individual');
Isomed_angular_Velocity = xlsread(expData,'Isomed_angular_Velocity');

Chino_Joint_Velo = [0 51.642 98.657 134.254 188.657];                       % Data taken from Chino et al., 2008
Chino_Joint_Velo_STD = [0 5.038 9.739 20.821 16.119];

Chino_force     = [1 .868 .768 .697 .603] .*scaleNormForce;
Chino_force_STD = [0 .143 .203 .242 .178] .*scaleNormForce;

Chino_Fascicle_Velo = [80.168 54.246 42.107 22.128 0];
Chino_Fascicle_Velo = flip(Chino_Fascicle_Velo);
Chino_Fascicle_Velo_STD = [23.52 19.221 12.266 5.564 0];
Chino_Fascicle_Velo_STD = flip(Chino_Fascicle_Velo_STD);

Hauraix_Joint_Velo = [0   29.4442   89.0488  147.9360  203.2319...
                      249.9101  277.9173];                                  % Data taken from Hauraix et al., 2015
Hauraix_Joint_Velo = Hauraix_Joint_Velo.*0.8314;                            % account for the difference in angular ankle joint velocity and dynamometer velocity
Hauraix_Force = [431.76 380.33 262.52 198.54 159.07 139.33 129.77];
Hauraix_Force_norm = (Hauraix_Force./Hauraix_Force(1)).*scaleNormForce;
Hauraix_Fascicle_Velo = [0 10.61 46.06 72.85 98.53 120.58 131.19];

Hauraix13_Fascicle_Velo = [56 85 113 131 153 168];                          % Data taken from Hauraix et al., 2013
Hauraix13_Joint_Velo = [30 90 150 210 270 330];


figure(fig_Fv);

%%
% R^2 ankle angular velocity vs. fascicle velocity
%%
[row,col] = find(subPlotPanelIndex==idxOmegaVsVel);          
 subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
 subplot('Position',subPlotVec);    

  fig_Fv = errorcloud(fig_Fv, ...
            mean(FSZ_Velocity_Individual,2),...
            mean(-Vicon_angular_Velocity,2),...
            std(-Vicon_angular_Velocity,0,2),...
            std(-Vicon_angular_Velocity,0,2),...
            std(FSZ_Velocity_Individual,0,2),...
            std(FSZ_Velocity_Individual,0,2),...
            expErrorLineType,...
            expFillColor,expColor, expColor, expLineWidth,'Exp.');
  hold on;
 
  plot(Chino_Fascicle_Velo,Chino_Joint_Velo,ChinoLineType,...
        'Color',ChinoColor,...
        'MarkerFaceColor',ChinoColor,...
        'LineWidth',ChinoLineWidth,...
        'DisplayName','Chino 2008');
  hold on; 
  plot(Hauraix_Fascicle_Velo,Hauraix_Joint_Velo,Hauraix2015LineType,...
    'Color',Hauraix2015Color,...
    'MarkerFaceColor',Hauraix2015Color,...
    'LineWidth',Hauraix2015LineWidth,...
    'DisplayName','Hauraix 2015');
  hold on
  plot(Hauraix13_Fascicle_Velo,Hauraix13_Joint_Velo,Hauraix2013LineType,...
       'Color',Hauraix2013Color,...
       'MarkerFaceColor',Hauraix2013Color,...
       'LineWidth',Hauraix2013LineWidth,...
       'DisplayName','Hauraix 2013');
  hold on;
   
  m = errorbar( mean(FSZ_Velocity_Individual,2),...
                mean(-Vicon_angular_Velocity,2),...
                std(-Vicon_angular_Velocity,0,2),...
                std(-Vicon_angular_Velocity,0,2),...
                std(FSZ_Velocity_Individual,0,2),...
                std(FSZ_Velocity_Individual,0,2),...
                expErrorLineType,...
                'Color',expColor,'MarkerFaceColor', expColor, ...
                'DisplayName','Exp.');  
  hold on
  %m.Marker = 'o';
  %    m.Color = 'k';
  %    m.LineStyle = '';    

  [p] = polyfit( mean(FSZ_Velocity_Individual,2),...
                 mean(-Vicon_angular_Velocity,2),1);
  xxx = linspace(min(mean(FSZ_Velocity_Individual,2)),...
                 max(mean(FSZ_Velocity_Individual,2)));

  yyy = polyval(p,xxx);

  ft = fittype( 'poly1' );
  [fit_A,a] = fit(mean(FSZ_Velocity_Individual,2),...
                  mean(-Vicon_angular_Velocity,2),ft);
    
  txt = ['R$^2$ of linear fit:',num2str(a.rsquare)];
  ht=text(20,75,txt,'Interpreter','latex','HorizontalAlignment','Left',...
          'VerticalAlignment','Bottom');
  set(ht,'Rotation',60);
  box off
  
  xlabel('Fascicle Velocity (mm/s)','Interpreter','latex');
  ylabel('Angular Velocity ($^\circ$/s)','Interpreter','latex');   
  title('Fascicle velocity vs. Ankle joint angular velocity');
  
  
%%
% Tendon force vs. fascicle velocity
%%

  [row,col] = find(subPlotPanelIndex==idxForceVsVel);          
   subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
   subplot('Position',subPlotVec); 

  hold on
 
  vmax = muscleArch.maximumNormalizedFiberVelocity...
         *muscleArch.optimalFiberLength;
  fill([0;fvCurveSample.x.*(vmax);0].*-m2mm,...
       [0;fvCurveSample.y;0].*scaleNormForce,...
       [1,1,1].*0.9,...
       'LineStyle','none',...
       'Handlevisibility','off');
  hold on;
            
  
  
  fig_Fv = errorcloud(fig_Fv, ...
            Chino_Fascicle_Velo',...
                Chino_force',...
                Chino_force_STD',...
                Chino_force_STD',...
                Chino_Fascicle_Velo_STD',...
                Chino_Fascicle_Velo_STD',...
                ChinoErrorLineType,...
                ChinoFillColor,ChinoColor,...
                ChinoColor,...
                ChinoLineWidth, ...
                'Chino 2008');    
  hold on;
  
  k = errorbar(Chino_Fascicle_Velo,...
                Chino_force,...
                Chino_force_STD,...
                Chino_force_STD,...
                Chino_Fascicle_Velo_STD,...
                Chino_Fascicle_Velo_STD,...
                ChinoErrorLineType,...
                'Color',ChinoColor,...
                'MarkerFaceColor', ChinoColor,...
                'LineWidth',ChinoLineWidth, ...
                'DisplayName','Chino 2008');
    
  hold on;

  %k.Marker = '^';
  %k.Color = 'r';
  %k.LineStyle = ':';


  
  fig_Fv = errorcloud(fig_Fv, ...
            mean(FSZ_Velocity_Individual,2),...  
            mean(Norm_Muscle_Force_Individual,2),...
            std(Norm_Muscle_Force_Individual,0,2),...
            std(Norm_Muscle_Force_Individual,0,2),...
            std(FSZ_Velocity_Individual,0,2),...
            std(FSZ_Velocity_Individual,0,2),... 
            expErrorLineType,...
            expFillColor,expColor, expColor, expLineWidth,'Exp.');   
          
  hold on;
  
  plot(Hauraix_Fascicle_Velo,...
       Hauraix_Force_norm,...
       Hauraix2015ErrorLineType,...
      'Color',Hauraix2015Color,...
      'MarkerFaceColor',Hauraix2015Color,...
      'LineWidth',Hauraix2015LineWidth,...
      'DisplayName','Hauraix 2015');

  hold on
  
  e = errorbar( mean(FSZ_Velocity_Individual,2),...  
                mean(Norm_Muscle_Force_Individual,2),...
                std(Norm_Muscle_Force_Individual,0,2),...
                std(Norm_Muscle_Force_Individual,0,2),...
                std(FSZ_Velocity_Individual,0,2),...
                std(FSZ_Velocity_Individual,0,2),... 
                expErrorLineType,...
                'Color',expColor,...
                'MarkerFaceColor', expColor,...
                'LineWidth', expLineWidth,...
                'DisplayName','Exp.');


  plot([fvCurveSample.x.*(vmax)].*-m2mm,...
       [fvCurveSample.y].*scaleNormForce,...
       '-','Color',[1,1,1],...
       'LineWidth',1.5,...
       'Handlevisibility','off');
  hold on;
           
              
  %e.Marker = 'o';
  %e.Color = 'k';
  %e.LineStyle = ':';

  ylim([0 1.1])
  box off;
  

  xlabel('Fascicle Velocity (mm/s)')
  ylabel('Norm. Force (\%)')
  title('Fascicle force vs. Fascicle velocity');
  
%%
% Tendon force vs. fascicle velocity
%%

  [row,col] = find(subPlotPanelIndex==idxForceVsOmega);          
   subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
   subplot('Position',subPlotVec); 

   
  fig_Fv = errorcloud(fig_Fv, ...
            Chino_Joint_Velo',...
            Chino_force',...
            Chino_force_STD',...
            Chino_force_STD',...
            Chino_Joint_Velo_STD',...
            Chino_Joint_Velo_STD',...
            ChinoErrorLineType,...
            ChinoFillColor,ChinoColor,...
            ChinoColor,...
            ChinoLineWidth, ...
            'Chino 2008');    
  hold on;   

  k = errorbar( Chino_Joint_Velo,...
                Chino_force,...
                Chino_force_STD,...
                Chino_force_STD,...
                Chino_Joint_Velo_STD,...
                Chino_Joint_Velo_STD,...
                ChinoErrorLineType,...
                'Color',ChinoColor, ...
                'MarkerFaceColor', ChinoColor,...
                'LineWidth',ChinoLineWidth,...
                'DisplayName', 'Chino 2008');
  hold on


  fig_Fv = errorcloud(fig_Fv, ...
            mean(-Vicon_angular_Velocity,2),...
            mean(Norm_Muscle_Force_Individual,2),...
            std(Norm_Muscle_Force_Individual,0,2),...
            std(Norm_Muscle_Force_Individual,0,2),...
            std(-Vicon_angular_Velocity,0,2),...
            std(-Vicon_angular_Velocity,0,2),...
            expErrorLineType,...
            expFillColor,expColor, expColor, expLineWidth,'Exp.');   
          
  hold on;  

  plot(Hauraix_Joint_Velo,...
    Hauraix_Force_norm,...
    Hauraix2015ErrorLineType,...
   'Color',Hauraix2015Color,...
   'MarkerFaceColor',Hauraix2015Color,...
   'LineWidth',Hauraix2015LineWidth,...
   'DisplayName','Hauraix 2015');
  hold on;

  e = errorbar( mean(-Vicon_angular_Velocity,2),...
                mean(Norm_Muscle_Force_Individual,2),...
                std(Norm_Muscle_Force_Individual,0,2),...
                std(Norm_Muscle_Force_Individual,0,2),...
                std(-Vicon_angular_Velocity,0,2),...
                std(-Vicon_angular_Velocity,0,2),...
                expErrorLineType,'Color',...
                expColor,'MarkerFaceColor',expColor,...
                'LineWidth',expLineWidth,...
                'DisplayName','Exp.');

  %e.Marker = 'o';
  %e.Color = 'k';
  %e.LineStyle = ':';    

  ylim([0 1.1]);  
  box off;
  

  %legend('Hauraix et al., 2015','current study')
  xlabel('Angular velocity ($^\circ$/s)')
  ylabel('Norm. Force (\%)')
  title('Fascicle force vs. Ankle joint angular velocity');
  




%%
% Add the simulated data
%%
  
for i=1:1:length(simDataSets)
  
  %Load the set and remove the simulation-specific name
  data=load(simDataSets{i});
  headField = fields(data);
  data = data.(headField{1});

  trials = size(data.standardResults.activation,2);
  measurementLength                   = zeros(trials,1);
  measuredForceAlongTendon            = zeros(trials,1);
  
  measuredFiberVelocity               = zeros(trials,1);
  measuredFiberVelocityAlongTendon    = zeros(trials,1);
  measuredAnkleAngularVelocity        = zeros(trials,1);
  pennationAngle                      = zeros(trials,1);
  normFiberLength                     = zeros(trials,1);

  measuredForceVelocityMultiplier     = zeros(trials,1);
  
  for j=1:1:trials
    %Use interpolation to evaluate the data at the time of the measurement


      measuredForceAlongTendon(j,1) = ...
        interp1(data.detailedResults.simulationTime(:,j), ...
                data.standardResults.normFiberForceAlongTendon(:,j), ...
                data.detailedResults.measurementTime(1,j));

      measuredForceAlongTendon(j,1) = measuredForceAlongTendon(j,1) ...
        ./data.detailedResults.normFiberForceAlongTendonIsometric(1,j);
              
      measuredFiberVelocity(j,1) = ...
        interp1( data.detailedResults.simulationTime(:,j), ...
                 data.standardResults.fiberVelocity(:,j), ...
                 data.detailedResults.measurementTime(1,j));
                                         
      measuredFiberVelocityAlongTendon(j,1) = ...
        interp1(data.detailedResults.simulationTime(:,j), ...
                data.standardResults.fiberVelocityAlongTendon(:,j), ...
                data.detailedResults.measurementTime(1,j));                                         
 
      measuredAnkleAngularVelocity(j,1) = ...
        interp1(data.detailedResults.simulationTime(:,j), ...
                data.detailedResults.ankleAngularVelocity(:,j), ...
                data.detailedResults.measurementTime(1,j));   
                                              
      pennationAngle(j,1) = ...
        interp1(data.detailedResults.simulationTime(:,j), ...
                data.standardResults.pennationAngle(:,j), ...
                data.detailedResults.measurementTime(1,j));   
              
      measuredForceVelocityMultiplier(j,1) = ...
        interp1(data.detailedResults.simulationTime(:,j), ...
                data.standardResults.fiberForceVelocityMultiplier(:,j), ...
                data.detailedResults.measurementTime(1,j));              
              
  end
  
  

  
 
  %%
  % R^2 ankle angular velocity vs. fascicle velocity
  %%
  m2mm    = 1000;
  rad2deg = 180/pi; 
  
  [row,col] = find(subPlotPanelIndex==idxOmegaVsVel);          
  subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
  subplot('Position',subPlotVec);    

    if(simDataPlotWhiteOutline(1,i)==1)
      plot(measuredFiberVelocityAlongTendon.*(-m2mm), ...
            measuredAnkleAngularVelocity.*(-rad2deg),...
            '-',...        
            'Color', [1,1,1],...
            'LineWidth',simDataSetLineWidth(1,i)*2,...        
            'HandleVisibility','off');
      hold on;
    end
    
   
  plot(measuredFiberVelocityAlongTendon.*(-m2mm), ...
        measuredAnkleAngularVelocity.*(-rad2deg),...
        simDataSetLineType{i},...        
        'Color', simDataSetColor(i,:),...
        'LineWidth',simDataSetLineWidth(1,i),...        
        'DisplayName',simDataSetName{i});
  hold on;
   
    
  %%
  % Tendon force vs. fascicle velocity
  %%

  [row,col] = find(subPlotPanelIndex==idxForceVsVel);          
  subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
  subplot('Position',subPlotVec); 

  if(simDataPlotWhiteOutline(1,i)==1)
    plot(measuredFiberVelocityAlongTendon.*(-m2mm), ...
         measuredForceAlongTendon.*scaleNormForce, ...
         '-',...  
          'Color',[1,1,1],...        
          'LineWidth',simDataSetLineWidth(1,i).*2,...        
          'HandleVisibility','off');
    hold on;  
  end
    
  plot(measuredFiberVelocityAlongTendon.*(-m2mm), ...
       measuredForceAlongTendon.*scaleNormForce, ...
       simDataSetLineType{i},...  
        'Color',simDataSetColor(i,:),...        
        'LineWidth',simDataSetLineWidth(1,i),...        
        'DisplayName',simDataSetName{i});
  hold on;

  if(i==1)
    ht=text(197,21,'Model Force Velocity Curve',...
         'HorizontalAlignment','Right',...
         'VerticalAlignment','Bottom');       
    hold on;
    set(ht,'Rotation',-14);
    hold on;
  end
  
%   plot(measuredFiberVelocityAlongTendon.*(-m2mm), ...
%        measuredForceVelocityMultiplier.*scaleNormForce, ...
%        simDataSetLineType{i},...  
%         'Color',simDataSetColor(i,:),...        
%         'LineWidth',simDataSetLineWidth(1,i),...        
%         'DisplayName',[simDataSetName{i},' fv']);
%   hold on;

  

   
  %%
  % Tendon force vs. fascicle velocity
  %%

  [row,col] = find(subPlotPanelIndex==idxForceVsOmega);          
  subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
  subplot('Position',subPlotVec);    
  
  if(simDataPlotWhiteOutline(1,i)==1)
    plot( measuredAnkleAngularVelocity.*(-rad2deg),...
          measuredForceAlongTendon.*scaleNormForce,...
          '-',...
          'Color',[1,1,1],...        
          'LineWidth',simDataSetLineWidth(1,i)*2,...
          'HandleVisibility','off');
    hold on;  
  end  
  plot( measuredAnkleAngularVelocity.*(-rad2deg),...
        measuredForceAlongTendon.*scaleNormForce,...
        simDataSetLineType{i},...
        'Color',simDataSetColor(i,:),...        
        'LineWidth',simDataSetLineWidth(1,i),...
        'DisplayName',simDataSetName{i});
  hold on;
  

%   plot(measuredAnkleAngularVelocity.*(-rad2deg), ...
%        measuredForceVelocityMultiplier.*scaleNormForce, ...
%        simDataSetLineType{i},...  
%         'Color',simDataSetColor(i,:),...        
%         'LineWidth',simDataSetLineWidth(1,i),...        
%         'DisplayName',[simDataSetName{i},' fv']);
%   hold on;  
  
end

%%
% Generate the velocity decomposition plots
%%
for i=1:1:length(simDataSets)
  [row,col] = find(subPlotPanelIndex==idxVelocityDecomposition);          
  subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
  subplot('Position',subPlotVec);   
  
  if(i==1)
    plot([0,300],[0,300],'-','Color',[1,1,1].*0.75,'LineWidth',1,...
         'HandleVisibility','off');
    hold on;
    plot([0,300],[0,0],'-','Color',[1,1,1].*0.75,'LineWidth',1,...
        'HandleVisibility','off');
    hold on;
    text(200,12.5,'Shortening','HorizontalAlignment','Right');
    hold on;
    text(200,-12.5,'Lengthening','HorizontalAlignment','Right');
    hold on;
    
  end

  
  %Load the set and remove the simulation-specific name
  data=load(simDataSets{i});
  headField = fields(data);
  data = data.(headField{1});

  trials = size(data.standardResults.activation,2);
  measuredForceAlongTendon            = zeros(trials,1);
  measuredFiberVelocityAlongTendon    = zeros(trials,1);
  measuredTendonVelocity              = zeros(trials,1);
  measuredPathVelocity                = zeros(trials,1);
  measuredPennationAngle              = zeros(trials,1);
  measuredNormFiberLength             = zeros(trials,1);
  measuredPassiveFiberForceAlongTendon= zeros(trials,1);                  
  measuredActivation             = zeros(trials,1);
  measuredForceVelocityMultiplier= zeros(trials,1);
  measuredActiveForceLengthMultiplier= zeros(trials,1);
  measuredPassiveForceLengthMultiplier= zeros(trials,1);
  measuredNormDamping= zeros(trials,1);
  
  for j=1:1:trials
    %Use interpolation to evaluate the data at the time of the measurement


      measuredForceAlongTendon(j,1) = ...
        interp1(data.detailedResults.simulationTime(:,j), ...
                data.standardResults.normFiberForceAlongTendon(:,j), ...
                data.detailedResults.measurementTime(1,j));              
              
      measuredFiberVelocityAlongTendon(j,1) = ...
        interp1(data.detailedResults.simulationTime(:,j), ...
                data.standardResults.fiberVelocityAlongTendon(:,j), ...
                data.detailedResults.measurementTime(1,j));  

      measuredTendonVelocity(j,1) = ...
        interp1(data.detailedResults.simulationTime(:,j), ...
                data.standardResults.tendonVelocity(:,j), ...
                data.detailedResults.measurementTime(1,j));                
                                              
      measuredPathVelocity(j,1) = ...
        interp1(data.detailedResults.simulationTime(:,j), ...
                data.standardResults.pathVelocity(:,j), ...
                data.detailedResults.measurementTime(1,j));                

      measuredPennationAngle(j,1) = ...
        interp1(data.detailedResults.simulationTime(:,j), ...
                data.standardResults.pennationAngle(:,j), ...
                data.detailedResults.measurementTime(1,j));   

      measuredNormFiberLength(j,1) = ...
        interp1(data.detailedResults.simulationTime(:,j), ...
                data.standardResults.normFiberLength(:,j), ...
                data.detailedResults.measurementTime(1,j));                 
                            
      measuredPassiveFiberForceAlongTendon(j,1)=...
        interp1(data.detailedResults.simulationTime(:,j), ...
                data.standardResults.passiveFiberForceAlongTendon(:,j), ...
                data.detailedResults.measurementTime(1,j));  

      measuredActivation(j,1) = ...
        interp1(data.detailedResults.simulationTime(:,j), ...
                data.standardResults.activation(:,j), ...
                data.detailedResults.measurementTime(1,j));    
              
      measuredForceVelocityMultiplier(j,1) = ...
        interp1(data.detailedResults.simulationTime(:,j), ...
                data.standardResults.fiberForceVelocityMultiplier(:,j), ...
                data.detailedResults.measurementTime(1,j));
              
      measuredActiveForceLengthMultiplier(j,1) = ...
        interp1(data.detailedResults.simulationTime(:,j), ...
                data.standardResults.fiberActiveForceLengthMultiplier(:,j), ...
                data.detailedResults.measurementTime(1,j));
      
      measuredNormDamping(j,1) = ...
        interp1(data.detailedResults.simulationTime(:,j), ...
                data.standardResults.normDamping(:,j), ...
                data.detailedResults.measurementTime(1,j));              
  end  
  
  plot(measuredPathVelocity.*(-m2mm),...
       measuredFiberVelocityAlongTendon.*(-m2mm),...
       simDataSetLineType{i},...
       'Color',simDataSetColor(i,:),...        
       'LineWidth',simDataSetLineWidth(1,i),...
       'DisplayName',[simDataSetName{i},' (Fiber Vel. AT)']);
  hold on;
  
  plot(measuredPathVelocity.*(-m2mm),...
      measuredTendonVelocity.*(-m2mm),...
      simDataSetLineType{i},...
     'Color',[1,0,0],...        
     'LineWidth',simDataSetLineWidth(1,i),...
     'DisplayName',[simDataSetName{i}, ' (Tendon Vel.)']);
  hold on;
  
  box off;
  
  if(i==1)
    xlabel('Path Shortening Velocity (mm/s)');
    ylabel('Shortening Velocity (mm/s)');    
  end
  
  
  [row,col] = find(subPlotPanelIndex==idxFiberLength);          
  subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
  subplot('Position',subPlotVec);  
  plot(measuredPathVelocity.*(-m2mm),...
      measuredNormFiberLength,...
      simDataSetLineType{i},...
     'Color',simDataSetColor(i,:),...        
     'LineWidth',simDataSetLineWidth(1,i),...
     'DisplayName',[simDataSetName{i}, ' (Norm. Fiber Length)']);
  hold on;  
  box off;
  
  if(i==1)
    xlabel('Path Shortening Velocity (mm/s)');
    ylabel('Norm. Fiber Length');    
  end
  

  [row,col] = find(subPlotPanelIndex==idxMultipliers);          
  subPlotVec = reshape(subPlotPanel(row,col,:),1,4); 
  
  subplot('Position',subPlotVec);  
  plot(measuredPathVelocity.*(-m2mm),...
      measuredActiveForceLengthMultiplier,...
      simDataSetLineType{i},...
     'Color',[1,0,0],...        
     'LineWidth',simDataSetLineWidth(1,i),...
     'DisplayName',[simDataSetName{i}, ' (fal)']);
  hold on;  
  
  plot(measuredPathVelocity.*(-m2mm),...
      measuredPassiveForceLengthMultiplier,...
      simDataSetLineType{i},...
     'Color',[0,0,1],...        
     'LineWidth',simDataSetLineWidth(1,i),...
     'DisplayName',[simDataSetName{i}, ' (fpe)']);
  hold on;  

  plot(measuredPathVelocity.*(-m2mm),...
      measuredForceVelocityMultiplier,...
      simDataSetLineType{i},...
     'Color',[0,0,0],...        
     'LineWidth',simDataSetLineWidth(1,i),...
     'DisplayName',[simDataSetName{i}, ' (fv)']);
  hold on;  
  
  plot(measuredPathVelocity.*(-m2mm),...
      measuredNormDamping,...
      simDataSetLineType{i},...
     'Color',[0,1,1],...        
     'LineWidth',simDataSetLineWidth(1,i),...
     'DisplayName',[simDataSetName{i}, ' (damping)']);
  hold on;   
  
  box off;    
  if(i==1)
    xlabel('Path Shortening Velocity (mm/s)');
    ylabel('Multipliers');    
  end    
  
end

for i=1:1:length(subplotList)
  [row,col] = find(subPlotPanelIndex==subplotList(i,1));          
  subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
  subplot('Position',subPlotVec);    
  legend('Location',simDataLegendPosition{i});
  legend boxoff;
  
  xlim(subplotXlim(i,:));
  ylim(subplotYlim(i,:));
  
  xticks(subplotTicks(i).xticks);
  yticks(subplotTicks(i).yticks);
end

figure(fig_Fv); 
configPlotExporter;
print('-dpdf',[outputFolder,outputFileName]); 

