clc;
close all;
clear all;

scaleHaraiuxJointVelocities = 1;%0.8314

standardMomentArm = 0.054;
smallMomentArm    = standardMomentArm/1.18;

standardTendonElasticity = 0.049;
highTendonElasticity     = 0.1;

flag_useMaganarisCEArchitecture = 0;

%Set the configuration of the two simulations that you would like to plot
fractionOfFastTwitchFibersA          = 1.0;
tendonStrainAtOneNormForceOverrideA  = highTendonElasticity;
ankleAchillesTendonMomentArmA        = smallMomentArm;

fractionOfFastTwitchFibersB          = 1.0;
tendonStrainAtOneNormForceOverrideB  = standardTendonElasticity;
ankleAchillesTendonMomentArmB        = standardMomentArm;

%The code and plots have note been updated to handle different 
%fractions of fast twitch fibers.
assert( abs(fractionOfFastTwitchFibersA...
           -fractionOfFastTwitchFibersB) < sqrt(eps))


flag_ignoreHauraix2013=1;
%%
%Generate the key words needed to form the name of the corresponding file
%%
%A series
fractionOfFastTwitchFibersStrA = ...
  ['FastTwitch_',num2str(round(fractionOfFastTwitchFibersA*100,0))];

if(tendonStrainAtOneNormForceOverrideA <0)
  tendonStrainAtOneNormForceOverrideA = 0.049; %The default
end
tendonStrainAtOneNormForceOverrideStrA = ...
  sprintf('_Tdn_%1.1f',round(tendonStrainAtOneNormForceOverrideA*100,1));
tendonStrainAtOneNormForceOverrideStrA(1,end-1)='p';

ankleAchillesTendonMomentArmStrA = sprintf('_%1.1fcm_',...
  round(ankleAchillesTendonMomentArmA*100,1));
ankleAchillesTendonMomentArmStrA(1,end-4)='p';

architectureStrA = sprintf('MaganarisCE_%d',flag_Magan

%B series
fractionOfFastTwitchFibersStrB = ...
  ['FastTwitch_',num2str(round(fractionOfFastTwitchFibersB*100,0))];

if(tendonStrainAtOneNormForceOverrideB <0)
  tendonStrainAtOneNormForceOverrideB = 0.049; %The default
end
tendonStrainAtOneNormForceOverrideStrB = ...
  sprintf('_Tdn_%1.1f',round(tendonStrainAtOneNormForceOverrideB*100,1));
tendonStrainAtOneNormForceOverrideStrB(1,end-1)='p';

ankleAchillesTendonMomentArmStrB = sprintf('_%1.1fcm_',...
  round(ankleAchillesTendonMomentArmB*100,1));
ankleAchillesTendonMomentArmStrB(1,end-4)='p';



dataFolder      = '../data/';
outputFolder    = '../plots/';
outputFileName  = ['fig_ForceVelocity_Simulation_Vs_Experiment_',...
                    fractionOfFastTwitchFibersStrA,...
                    fractionOfFastTwitchFibersStrB,...
                    tendonStrainAtOneNormForceOverrideStrA,...
                    tendonStrainAtOneNormForceOverrideStrB,...
                    ankleAchillesTendonMomentArmStrA,...
                    ankleAchillesTendonMomentArmStrB,'.pdf'];

expData = '../data/Own_Study.xlsx'; 



%This was called `path' before: this is also the name of a Matlab's
%search path: do not make variables with the same name. Matlab should 
%give you an error, but it doesn't, it just silently lets you overwrite
%an important internal varible

simDataSetsA = {...
  ['../data/simFv_gasmed_preload_1_dampedFiberElasticTendon_',...
    fractionOfFastTwitchFibersStrA,...
    tendonStrainAtOneNormForceOverrideStrA,...
    ankleAchillesTendonMomentArmStrA,'.mat'],...
  ['../data/simFv_gasmed_preload_0_dampedFiberElasticTendon_',...
    fractionOfFastTwitchFibersStrA,...
    tendonStrainAtOneNormForceOverrideStrA,...
    ankleAchillesTendonMomentArmStrA,'.mat']};
             
simDataSetsB = {...
  ['../data/simFv_gasmed_preload_1_dampedFiberElasticTendon_',...
    fractionOfFastTwitchFibersStrB,...
    tendonStrainAtOneNormForceOverrideStrB,...
    ankleAchillesTendonMomentArmStrB,'.mat'],...
  ['../data/simFv_gasmed_preload_0_dampedFiberElasticTendon_',...
    fractionOfFastTwitchFibersStrB,...
    tendonStrainAtOneNormForceOverrideStrB,...
    ankleAchillesTendonMomentArmStrB,'.mat']};  
  
simDataSetName = {'Sim.: Preload',...
                  'Sim.: Slack'};      
                
simDataSetFaceAlpha = [0.5,0.5]; 
%simDataSetColor = [0.5,0.5,0.5;...
%                   0.85,0.85,0.85];                
                
simDataSetColor  = [255,0,0; ...
                    0,0.00,255]./255;
               
simDataSetLineType = {'-','--'};                  

simDataPlotWhiteOutline = [0,1];

simDataSetLineWidth= [2.0,0.5];

load([dataFolder,'normMuscleCurves_',...
                  fractionOfFastTwitchFibersStrA,'.mat']);
load([dataFolder,'muscleArch_',...
                  fractionOfFastTwitchFibersStrA,'.mat']);

fvCurveSample = calcBezierYFcnXCurveSampleVector(...
                normMuscleCurves.fiberForceVelocityCurve, 500);

%%
% Subplot Configuration
%%

scaleNormForce =  100;

%ankleAchillesTendonMomentArm = 0.054; %moment arm in m
%from Rugg et al.

ankleAchillesTendonMomentArmMax =...
  max(ankleAchillesTendonMomentArmA,ankleAchillesTendonMomentArmB);

omegaMaxDeg = 200;
m2mm = 1000;
velMaxMM    = (omegaMaxDeg*(pi/180))*ankleAchillesTendonMomentArmMax*m2mm;

idxOmegaVsVel=1;
idxForceVsVel=3;
idxForceVsOmega=5;

idxVelocityDecomposition = 2;
idxFiberLength=4;
idxMultipliers=6;

subplotList = [idxOmegaVsVel;...
               idxForceVsVel;...
               idxForceVsOmega;...
               idxVelocityDecomposition;...
               idxFiberLength;...
               idxMultipliers];

subplotXlim = [0,velMaxMM.*1.05;...
               0,velMaxMM.*1.05;...
               0,omegaMaxDeg.*1.05;...
               0,velMaxMM.*1.05;...
               0,velMaxMM.*1.05;...
               0,velMaxMM.*1.05];
             
subplotYlim = [0,omegaMaxDeg.*1.1;...
               0,1.1.*scaleNormForce;...
               0,1.1.*scaleNormForce;...
  -velMaxMM.*0.3,velMaxMM.*1.4;...
               0,1.1;...
               -0.1,1.1];

omegaDegTicks     = round([0:0.125:1].*omegaMaxDeg,0);             
velMMTicks        = round([0:0.125:1].*velMaxMM,0);             
forcePercentTicks = round([0:0.25:1].*100,0);

subplotTicks(3) =struct('xticks',[],'yticks',[]);
subplotTicks(1).xticks = velMMTicks;
subplotTicks(1).yticks = omegaDegTicks;

subplotTicks(2).xticks = velMMTicks;
subplotTicks(2).yticks = forcePercentTicks;

subplotTicks(3).xticks = omegaDegTicks;
subplotTicks(3).yticks = forcePercentTicks;

subplotTicks(4).xticks = round([     0:0.125:1.125].*velMaxMM,0);
subplotTicks(4).yticks = round([-0.25:0.125:1.125].*velMaxMM,0);

subplotTicks(5).xticks = round([     0:0.125:1.125].*velMaxMM,0);
subplotTicks(5).yticks = round([0:0.1:1.1],1);

subplotTicks(6).xticks = round([     0:0.125:1.125].*velMaxMM,0);
subplotTicks(6).yticks = round([0:0.1:1.1],1);

simDataAddLegend = [1,1,1,0,0,0];
simDataLegendPosition = {'SouthEast','NorthEast','SouthWest','NorthWest',...
                         'SouthEast','SouthWest'};

%%
% Individual Data Series Configuration
%%

flag_plotExpMeanLine = 0;

greyFill1 = [1,1,1].*0.75;
greyFill2 = [1,1,1].*0.9;

expColor = [1,1,1].*0.5;
expFillColor = expColor.*0.25 + greyFill1.*(0.75);
expLineWidth = 1;
expErrorLineType = 'o';

ChinoColor = [1,0.65,1];
ChinoFillColor = ChinoColor.*0.25+greyFill2.*0.75;
ChinoLineWidth = 1.5;
ChinoErrorLineType = '^';
ChinoLineType = '-';


Hauraix2015Color        = [0.5,0.5,1]; 
Hauraix2015FillColor    = Hauraix2015Color.*0.25 + greyFill2.*0.75; 
Hauraix2015LineWidth= 1.; 
Hauraix2015ErrorLineType = 's--';
Hauraix2015LineType = '--';

Hauraix2013Color      = [0.75,0.75,1]; 
Hauraix2013FillColor  = Hauraix2013Color.*0.25 + greyFill2.*0.75;
Hauraix2013LineWidth= 0.5; 
Hauraix2013ErrorLineType = 'd--';
Hauraix2013LineType = '--';

if(flag_plotExpMeanLine ==1)
  expErrorLineType = [expErrorLineType,':'];
  ChinoErrorLineType = [ChinoErrorLineType,':'];
  Hauraix2015ErrorLineType = [Hauraix2015ErrorLineType,':'];
  Hauraix2013ErrorLineType = [Hauraix2013ErrorLineType,':'];
  
end


%%
% Plot configuration
%%



numberOfFiguresPerPage        = 6;
numberOfVerticalPlotRows      = 3;
numberOfHorizontalPlotColumns = 2;    
assert(numberOfVerticalPlotRows*numberOfHorizontalPlotColumns ...
         >= numberOfFiguresPerPage);

plotHorizMarginCm = 2;
plotVertMarginCm  = 2;           
pageHeight  = 29.7;
pageWidth   = 21.0;           
plotHeight  = 8;
plotWidth   = 10;

plotConfigGeneric;

fig_Fv    = figure;
fig_FvPub = figure;

%%
% Tabulated experimental data
%%

Norm_Muscle_Force_Individual = xlsread(expData,'Muscle_Force_Individual').*scaleNormForce;
Vicon_angular_Velocity = xlsread(expData,'Vicon_angular_Velocity');
FSZ_Velocity_Individual = xlsread(expData,'Velocity_Individual');
Isomed_angular_Velocity = xlsread(expData,'Isomed_angular_Velocity');

Chino_Joint_Velo = [0 51.642 98.657 134.254 188.657];                       % Data taken from Chino et al., 2008
Chino_Joint_Velo_STD = [0 5.038 9.739 20.821 16.119];

Chino_force     = [1 .868 .768 .697 .603] .*scaleNormForce;
Chino_force_STD = [0 .143 .203 .242 .178] .*scaleNormForce;

Chino_Fascicle_Velo = [80.168 54.246 42.107 22.128 0];
Chino_Fascicle_Velo = flip(Chino_Fascicle_Velo);
Chino_Fascicle_Velo_STD = [23.52 19.221 12.266 5.564 0];
Chino_Fascicle_Velo_STD = flip(Chino_Fascicle_Velo_STD);

Hauraix_Joint_Velo = [0   29.4442   89.0488  147.9360  203.2319...
                      249.9101  277.9173];                                  % Data taken from Hauraix et al., 2015
Hauraix_Joint_Velo = Hauraix_Joint_Velo.*scaleHaraiuxJointVelocities;       % account for the difference in angular ankle joint velocity and dynamometer velocity
Hauraix_Force = [431.76 380.33 262.52 198.54 159.07 139.33 129.77];
Hauraix_Force_norm = (Hauraix_Force./Hauraix_Force(1)).*scaleNormForce;
Hauraix_Fascicle_Velo = [0 10.61 46.06 72.85 98.53 120.58 131.19];

Hauraix13_Fascicle_Velo = [56 85 113 131 153 168];                          % Data taken from Hauraix et al., 2013
Hauraix13_Joint_Velo = [30 90 150 210 270 330];


figure(fig_Fv);


%%
% R^2 ankle angular velocity vs. fascicle velocity
%%
[row,col] = find(subPlotPanelIndex==idxOmegaVsVel);          
 subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
 subplot('Position',subPlotVec);    

  fig_Fv = errorcloud(fig_Fv, ...
            mean(FSZ_Velocity_Individual,2),...
            mean(-Vicon_angular_Velocity,2),...
            std(-Vicon_angular_Velocity,0,2),...
            std(-Vicon_angular_Velocity,0,2),...
            std(FSZ_Velocity_Individual,0,2),...
            std(FSZ_Velocity_Individual,0,2),...
            expErrorLineType,...
            expFillColor,expColor, expColor, expLineWidth,'Exp.');
  hold on;
 
  plot(Chino_Fascicle_Velo,Chino_Joint_Velo,ChinoLineType,...
        'Color',ChinoColor,...
        'MarkerFaceColor',ChinoColor,...
        'LineWidth',ChinoLineWidth,...
        'DisplayName','Chino 2008');
  hold on; 
  plot(Hauraix_Fascicle_Velo,Hauraix_Joint_Velo,Hauraix2015LineType,...
    'Color',Hauraix2015Color,...
    'MarkerFaceColor',Hauraix2015Color,...
    'LineWidth',Hauraix2015LineWidth,...
    'DisplayName','Hauraix 2015');
  hold on
  if(flag_ignoreHauraix2013==0)
    plot(Hauraix13_Fascicle_Velo,Hauraix13_Joint_Velo,Hauraix2013LineType,...
         'Color',Hauraix2013Color,...
         'MarkerFaceColor',Hauraix2013Color,...
         'LineWidth',Hauraix2013LineWidth,...
         'DisplayName','Hauraix 2013');
    hold on;
  end
   
  m = errorbar( mean(FSZ_Velocity_Individual,2),...
                mean(-Vicon_angular_Velocity,2),...
                std(-Vicon_angular_Velocity,0,2),...
                std(-Vicon_angular_Velocity,0,2),...
                std(FSZ_Velocity_Individual,0,2),...
                std(FSZ_Velocity_Individual,0,2),...
                expErrorLineType,...
                'Color',expColor,'MarkerFaceColor', expColor, ...
                'DisplayName','Exp.');  
  hold on
  %m.Marker = 'o';
  %    m.Color = 'k';
  %    m.LineStyle = '';    

  [p] = polyfit( mean(FSZ_Velocity_Individual,2),...
                 mean(-Vicon_angular_Velocity,2),1);
  xxx = linspace(min(mean(FSZ_Velocity_Individual,2)),...
                 max(mean(FSZ_Velocity_Individual,2)));

  yyy = polyval(p,xxx);

  ft = fittype( 'poly1' );
  [fit_A,a] = fit(mean(FSZ_Velocity_Individual,2),...
                  mean(-Vicon_angular_Velocity,2),ft);
    
  txt = ['R$^2$ of linear fit:',num2str(a.rsquare)];
  ht=text(20,75,txt,'Interpreter','latex','HorizontalAlignment','Left',...
          'VerticalAlignment','Bottom');
  set(ht,'Rotation',60);
  box off
  
  xlabel('Fascicle Velocity (mm/s)','Interpreter','latex');
  ylabel('Angular Velocity ($^\circ$/s)','Interpreter','latex');   
  title('A. Fascicle velocity vs. Ankle joint angular velocity');
  
  
%%
% Tendon force vs. fascicle velocity
%%

  [row,col] = find(subPlotPanelIndex==idxForceVsVel);          
   subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
   subplot('Position',subPlotVec); 

  hold on
 
  vmax = muscleArch.maximumNormalizedFiberVelocity...
         *muscleArch.optimalFiberLength;
  fill([0;fvCurveSample.x.*(vmax);0].*-m2mm,...
       [0;fvCurveSample.y;0].*scaleNormForce,...
       [1,1,1].*0.9,...
       'LineStyle','none',...
       'Handlevisibility','off');
  hold on;
            
  
  
  fig_Fv = errorcloud(fig_Fv, ...
            Chino_Fascicle_Velo',...
                Chino_force',...
                Chino_force_STD',...
                Chino_force_STD',...
                Chino_Fascicle_Velo_STD',...
                Chino_Fascicle_Velo_STD',...
                ChinoErrorLineType,...
                ChinoFillColor,ChinoColor,...
                ChinoColor,...
                ChinoLineWidth, ...
                'Chino 2008');    
  hold on;
  
  k = errorbar(Chino_Fascicle_Velo,...
                Chino_force,...
                Chino_force_STD,...
                Chino_force_STD,...
                Chino_Fascicle_Velo_STD,...
                Chino_Fascicle_Velo_STD,...
                ChinoErrorLineType,...
                'Color',ChinoColor,...
                'MarkerFaceColor', ChinoColor,...
                'LineWidth',ChinoLineWidth, ...
                'DisplayName','Chino 2008');
    
  hold on;

  %k.Marker = '^';
  %k.Color = 'r';
  %k.LineStyle = ':';


  
  fig_Fv = errorcloud(fig_Fv, ...
            mean(FSZ_Velocity_Individual,2),...  
            mean(Norm_Muscle_Force_Individual,2),...
            std(Norm_Muscle_Force_Individual,0,2),...
            std(Norm_Muscle_Force_Individual,0,2),...
            std(FSZ_Velocity_Individual,0,2),...
            std(FSZ_Velocity_Individual,0,2),... 
            expErrorLineType,...
            expFillColor,expColor, expColor, expLineWidth,'Exp.');   
          
  hold on;
  
  plot(Hauraix_Fascicle_Velo,...
       Hauraix_Force_norm,...
       Hauraix2015ErrorLineType,...
      'Color',Hauraix2015Color,...
      'MarkerFaceColor',Hauraix2015Color,...
      'LineWidth',Hauraix2015LineWidth,...
      'DisplayName','Hauraix 2015');

  hold on
  
  e = errorbar( mean(FSZ_Velocity_Individual,2),...  
                mean(Norm_Muscle_Force_Individual,2),...
                std(Norm_Muscle_Force_Individual,0,2),...
                std(Norm_Muscle_Force_Individual,0,2),...
                std(FSZ_Velocity_Individual,0,2),...
                std(FSZ_Velocity_Individual,0,2),... 
                expErrorLineType,...
                'Color',expColor,...
                'MarkerFaceColor', expColor,...
                'LineWidth', expLineWidth,...
                'DisplayName','Exp.');


  plot([fvCurveSample.x.*(vmax)].*-m2mm,...
       [fvCurveSample.y].*scaleNormForce,...
       '-','Color',[1,1,1],...
       'LineWidth',1.5,...
       'Handlevisibility','off');
  hold on;
           
              
  %e.Marker = 'o';
  %e.Color = 'k';
  %e.LineStyle = ':';

  ylim([0 1.1])
  box off;
  

  xlabel('Fascicle Velocity (mm/s)')
  ylabel('Norm. Force (\%)')
  title('B. Fascicle force vs. Fascicle velocity');
  
%%
% Tendon force vs. ankle angular velocity
%%

  [row,col] = find(subPlotPanelIndex==idxForceVsOmega);          
   subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
   subplot('Position',subPlotVec); 


%I cannot plot this any more: now there are two force-angular-velocity
%curves
%   vmax = muscleArch.maximumNormalizedFiberVelocity...
%          *muscleArch.optimalFiberLength;
%   ankleOmegaRad = -fvCurveSample.x.*(vmax)/ankleAchillesTendonMomentArmMax;
%   ankleOmegaDeg = ankleOmegaRad.*(180/pi);      
%   
%   fill([0;ankleOmegaDeg;0],...
%        [0;fvCurveSample.y;0].*scaleNormForce,...
%        [1,1,1].*0.9,...
%        'LineStyle','none',...
%        'Handlevisibility','off');
%   hold on;   
    
   
  fig_Fv = errorcloud(fig_Fv, ...
            Chino_Joint_Velo',...
            Chino_force',...
            Chino_force_STD',...
            Chino_force_STD',...
            Chino_Joint_Velo_STD',...
            Chino_Joint_Velo_STD',...
            ChinoErrorLineType,...
            ChinoFillColor,ChinoColor,...
            ChinoColor,...
            ChinoLineWidth, ...
            'Chino 2008');    
  hold on;   

  k = errorbar( Chino_Joint_Velo,...
                Chino_force,...
                Chino_force_STD,...
                Chino_force_STD,...
                Chino_Joint_Velo_STD,...
                Chino_Joint_Velo_STD,...
                ChinoErrorLineType,...
                'Color',ChinoColor, ...
                'MarkerFaceColor', ChinoColor,...
                'LineWidth',ChinoLineWidth,...
                'DisplayName', 'Chino 2008');
  hold on


  fig_Fv = errorcloud(fig_Fv, ...
            mean(-Vicon_angular_Velocity,2),...
            mean(Norm_Muscle_Force_Individual,2),...
            std(Norm_Muscle_Force_Individual,0,2),...
            std(Norm_Muscle_Force_Individual,0,2),...
            std(-Vicon_angular_Velocity,0,2),...
            std(-Vicon_angular_Velocity,0,2),...
            expErrorLineType,...
            expFillColor,expColor, expColor, expLineWidth,'Exp.');   
          
  hold on;  

  plot(Hauraix_Joint_Velo,...
    Hauraix_Force_norm,...
    Hauraix2015ErrorLineType,...
   'Color',Hauraix2015Color,...
   'MarkerFaceColor',Hauraix2015Color,...
   'LineWidth',Hauraix2015LineWidth,...
   'DisplayName','Hauraix 2015');
  hold on;

  e = errorbar( mean(-Vicon_angular_Velocity,2),...
                mean(Norm_Muscle_Force_Individual,2),...
                std(Norm_Muscle_Force_Individual,0,2),...
                std(Norm_Muscle_Force_Individual,0,2),...
                std(-Vicon_angular_Velocity,0,2),...
                std(-Vicon_angular_Velocity,0,2),...
                expErrorLineType,'Color',...
                expColor,'MarkerFaceColor',expColor,...
                'LineWidth',expLineWidth,...
                'DisplayName','Exp.');

  %e.Marker = 'o';
  %e.Color = 'k';
  %e.LineStyle = ':';    

  
  
%   plot(ankleOmegaDeg,...
%        fvCurveSample.y.*scaleNormForce,...
%        '-','Color',[1,1,1],...
%        'LineWidth',1.5,...
%        'Handlevisibility','off');
%   hold on;  
  
  ylim([0 1.1]);  
  box off;
  

  %legend('Hauraix et al., 2015','current study')
  xlabel('Angular velocity ($^\circ$/s)')
  ylabel('Norm. Force (\%)')
  title('C. Fascicle force vs. Ankle joint angular velocity');
  




%%
% Add the simulated data
%%

assert(length(simDataSetsA)==length(simDataSetsB));
  
for i=1:1:length(simDataSetsA)
  
  %Load the set and remove the simulation-specific name
  dataA=load(simDataSetsA{i});
  headField = fields(dataA);
  dataA = dataA.(headField{1});

  dataB=load(simDataSetsB{i});
  headField = fields(dataB);
  dataB = dataB.(headField{1});  
  
  %The first index is for dataA, the 2nd for dataB
  trials = size(dataA.standardResults.activation,2);
  measurementLength                   = zeros(trials,2);
  measuredForceAlongTendon            = zeros(trials,2);
  measuredFiberVelocity               = zeros(trials,2);
  measuredFiberVelocityAlongTendon    = zeros(trials,2);
  measuredAnkleAngularVelocity        = zeros(trials,2);
  pennationAngle                      = zeros(trials,2);
  normFiberLength                     = zeros(trials,2);
  measuredForceVelocityMultiplier     = zeros(trials,2);

  for k=1:1:2
    data = [];
    switch k
      case 1
        data=dataA;
      case 2
        data=dataB;        
      otherwise
        assert(0);
    end
    
    for j=1:1:trials
      %Use interpolation to evaluate the data at the time of the measurement

        measuredForceAlongTendon(j,k) = ...
          interp1(data.detailedResults.simulationTime(:,j), ...
                  data.standardResults.normFiberForceAlongTendon(:,j), ...
                  data.detailedResults.measurementTime(1,j));

        measuredForceAlongTendon(j,k) = measuredForceAlongTendon(j,1) ...
          ./data.detailedResults.normFiberForceAlongTendonIsometric(1,j);

        measuredFiberVelocity(j,k) = ...
          interp1( data.detailedResults.simulationTime(:,j), ...
                   data.standardResults.fiberVelocity(:,j), ...
                   data.detailedResults.measurementTime(1,j));

        measuredFiberVelocityAlongTendon(j,k) = ...
          interp1(data.detailedResults.simulationTime(:,j), ...
                  data.standardResults.fiberVelocityAlongTendon(:,j), ...
                  data.detailedResults.measurementTime(1,j));                                         

        measuredAnkleAngularVelocity(j,k) = ...
          interp1(data.detailedResults.simulationTime(:,j), ...
                  data.detailedResults.ankleAngularVelocity(:,j), ...
                  data.detailedResults.measurementTime(1,j));   

        pennationAngle(j,k) = ...
          interp1(data.detailedResults.simulationTime(:,j), ...
                  data.standardResults.pennationAngle(:,j), ...
                  data.detailedResults.measurementTime(1,j));   

        measuredForceVelocityMultiplier(j,k) = ...
          interp1(data.detailedResults.simulationTime(:,j), ...
                  data.standardResults.fiberForceVelocityMultiplier(:,j), ...
                  data.detailedResults.measurementTime(1,j));              

    end
  end 
  

  
 
  %%
  % R^2 ankle angular velocity vs. fascicle velocity
  %%
  m2mm    = 1000;
  rad2deg = 180/pi; 
  
  [row,col] = find(subPlotPanelIndex==idxOmegaVsVel);          
  subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
  subplot('Position',subPlotVec);    


  fill([        measuredFiberVelocityAlongTendon(:,1);...
         fliplr(measuredFiberVelocityAlongTendon(:,2)')'].*(-m2mm), ...
        [       measuredAnkleAngularVelocity(:,1);...
         fliplr(measuredAnkleAngularVelocity(:,2)')'].*(-rad2deg),...
         simDataSetColor(i,:),...
        'LineStyle','none',...        
        'DisplayName',simDataSetName{i},...
        'FaceAlpha', simDataSetFaceAlpha(1,i));
  hold on;

    
    
  %%
  % Tendon force vs. fascicle velocity
  %%

  [row,col] = find(subPlotPanelIndex==idxForceVsVel);          
  subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
  subplot('Position',subPlotVec); 

  fill([        measuredFiberVelocityAlongTendon(:,1);...
         fliplr(measuredFiberVelocityAlongTendon(:,2)')'].*(-m2mm), ...
        [       measuredForceAlongTendon(:,1);...
         fliplr(measuredForceAlongTendon(:,2)')'].*scaleNormForce,...
         simDataSetColor(i,:),...
        'LineStyle','none',...        
        'DisplayName',simDataSetName{i},...
        'FaceAlpha', simDataSetFaceAlpha(1,i));
  hold on;
  


  if(i==1)
    ht=text(197,12,'Model Force Velocity Curve',...
         'HorizontalAlignment','Right',...
         'VerticalAlignment','Bottom');       
    hold on;
    set(ht,'Rotation',-10);
    hold on;
  end
  
%   plot(measuredFiberVelocityAlongTendon.*(-m2mm), ...
%        measuredForceVelocityMultiplier.*scaleNormForce, ...
%        simDataSetLineType{i},...  
%         'Color',simDataSetColor(i,:),...        
%         'LineWidth',simDataSetLineWidth(1,i),...        
%         'DisplayName',[simDataSetName{i},' fv']);
%   hold on;

  

   
  %%
  % Tendon force vs. ankle angular velocity
  %%

  [row,col] = find(subPlotPanelIndex==idxForceVsOmega);          
  subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
  subplot('Position',subPlotVec);    
  

  fill([        measuredAnkleAngularVelocity(:,1);...
         fliplr(measuredAnkleAngularVelocity(:,2)')'].*(-rad2deg), ...
        [       measuredForceAlongTendon(:,1);...
         fliplr(measuredForceAlongTendon(:,2)')'].*scaleNormForce,...
         simDataSetColor(i,:),...
        'LineStyle','none',...        
        'DisplayName',simDataSetName{i},...
        'FaceAlpha', simDataSetFaceAlpha(1,i));
  hold on;  
  

  
%   if(i==1)
%     ht=text(210,12,'Model Force Velocity Curve',...
%          'HorizontalAlignment','Right',...
%          'VerticalAlignment','Bottom');       
%     hold on;
%     set(ht,'Rotation',-10);
%     hold on;
% 
%   end

  
  
%   plot(measuredAnkleAngularVelocity.*(-rad2deg), ...
%        measuredForceVelocityMultiplier.*scaleNormForce, ...
%        simDataSetLineType{i},...  
%         'Color',simDataSetColor(i,:),...        
%         'LineWidth',simDataSetLineWidth(1,i),...        
%         'DisplayName',[simDataSetName{i},' fv']);
%   hold on;  
  
end

%%
% Generate the velocity decomposition plots
%%

for i=1:1:length(simDataSetsA)
  flag_preload=0;
  tagPreload = '';
  if(contains(simDataSetsA{i},'preload_1')==1)
    flag_preload=1;
    tagPreload = ' (Pre)';
  end
  
  
  %Load the set and remove the simulation-specific name
  dataA=load(simDataSetsA{i});
  dataB=load(simDataSetsB{i});
  

  trials = size(data.standardResults.activation,2);
  measuredForceAlongTendon            = zeros(trials,2);
  measuredFiberVelocityAlongTendon    = zeros(trials,2);
  measuredTendonVelocity              = zeros(trials,2);
  measuredPathVelocity                = zeros(trials,2);
  measuredPennationAngle              = zeros(trials,2);
  measuredNormFiberLength             = zeros(trials,2);
  startNormFiberLength                = zeros(trials,2);
  endNormFiberLength                  = zeros(trials,2);

  measuredPassiveFiberForceAlongTendon= zeros(trials,2);                  
  measuredActivation             = zeros(trials,2);
  measuredForceVelocityMultiplier= zeros(trials,2);
  measuredActiveForceLengthMultiplier= zeros(trials,2);
  measuredPassiveForceLengthMultiplier= zeros(trials,2);
  measuredNormDamping= zeros(trials,2);

  for k=1:1:2
    data = [];
    switch k
      case 1
        data=dataA;
      case 2
        data=dataB;        
      otherwise
        assert(0);
    end
    headField = fields(data);
    data = data.(headField{1});    

    for j=1:1:trials
      %Use interpolation to evaluate the data at the time of the measurement


        measuredForceAlongTendon(j,k) = ...
          interp1(data.detailedResults.simulationTime(:,j), ...
                  data.standardResults.normFiberForceAlongTendon(:,j), ...
                  data.detailedResults.measurementTime(1,j));              

        measuredFiberVelocityAlongTendon(j,k) = ...
          interp1(data.detailedResults.simulationTime(:,j), ...
                  data.standardResults.fiberVelocityAlongTendon(:,j), ...
                  data.detailedResults.measurementTime(1,j));  

        measuredTendonVelocity(j,k) = ...
          interp1(data.detailedResults.simulationTime(:,j), ...
                  data.standardResults.tendonVelocity(:,j), ...
                  data.detailedResults.measurementTime(1,j));                

        measuredPathVelocity(j,k) = ...
          interp1(data.detailedResults.simulationTime(:,j), ...
                  data.standardResults.pathVelocity(:,j), ...
                  data.detailedResults.measurementTime(1,j));                

        measuredPennationAngle(j,k) = ...
          interp1(data.detailedResults.simulationTime(:,j), ...
                  data.standardResults.pennationAngle(:,j), ...
                  data.detailedResults.measurementTime(1,j));   

        measuredNormFiberLength(j,k) = ...
          interp1(data.detailedResults.simulationTime(:,j), ...
                  data.standardResults.normFiberLength(:,j), ...
                  data.detailedResults.measurementTime(1,j));                 

        startNormFiberLength(j,k) = data.standardResults.normFiberLength(1,j);          
        endNormFiberLength(j,k) = data.standardResults.normFiberLength(end,j);          


        measuredPassiveFiberForceAlongTendon(j,k)=...
          interp1(data.detailedResults.simulationTime(:,j), ...
                  data.standardResults.passiveFiberForceAlongTendon(:,j), ...
                  data.detailedResults.measurementTime(1,j));  

        measuredActivation(j,k) = ...
          interp1(data.detailedResults.simulationTime(:,j), ...
                  data.standardResults.activation(:,j), ...
                  data.detailedResults.measurementTime(1,j));    

        measuredForceVelocityMultiplier(j,k) = ...
          interp1(data.detailedResults.simulationTime(:,j), ...
                  data.standardResults.fiberForceVelocityMultiplier(:,j), ...
                  data.detailedResults.measurementTime(1,j));

        measuredActiveForceLengthMultiplier(j,k) = ...
          interp1(data.detailedResults.simulationTime(:,j), ...
                  data.standardResults.fiberActiveForceLengthMultiplier(:,j), ...
                  data.detailedResults.measurementTime(1,j));

        measuredNormDamping(j,k) = ...
          interp1(data.detailedResults.simulationTime(:,j), ...
                  data.standardResults.normDamping(:,j), ...
                  data.detailedResults.measurementTime(1,j));              
    end    
  end
  
  [row,col] = find(subPlotPanelIndex==idxVelocityDecomposition);          
  subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
  subplot('Position',subPlotVec);   

  if(i==1)
%     fill([0,300,300,0],[0,300,0,0],[1,1,1].*0.9,'EdgeColor','none',...
%          'HandleVisibility','off');
%     hold on;
%     ht = text(160,160,'Shortening slower than path',...
%       'HorizontalAlignment','Right','VerticalAlignment','Top');
%     hold on;
%     set(ht, 'Rotation',25);
%     ht = text(160,160,'Shortening faster than path',...
%       'HorizontalAlignment','Right','VerticalAlignment','bottom');
%     hold on;    
%     set(ht, 'Rotation',25);    
    plot([0,300],[0,0],'-','Color',[1,1,1].*0.75,'LineWidth',1,...
        'HandleVisibility','off');
    hold on;
    text(94, 6.,'Shortening','HorizontalAlignment','Center');
    hold on;
    text(94,-6.,'Lengthening','HorizontalAlignment','Center');
    hold on;
    
  end

  xStart = measuredPathVelocity(1,1).*(-m2mm);
  xEnd   = measuredPathVelocity(end,1).*(-m2mm);
  xDelta = (xEnd-xStart)*0.05;
  yDeltaStatic = 5;
  

  fill([        measuredPathVelocity(:,1);...
         fliplr(measuredPathVelocity(:,2)')'].*(-m2mm), ...
        [       measuredFiberVelocityAlongTendon(:,1);...
         fliplr(measuredFiberVelocityAlongTendon(:,2)')'].*(-m2mm),...
         simDataSetColor(i,:),...
        'LineStyle','none',...        
        'DisplayName',[simDataSetName{i},' (Fiber Vel. AT)'],...
        'FaceAlpha', simDataSetFaceAlpha(1,i));  
  
  hold on;
  
  ht=text(xEnd, measuredFiberVelocityAlongTendon(end,1).*(-m2mm)-yDeltaStatic,...
       ['$$v^{MaT}$$',tagPreload],...
       'VerticalAlignment','Top','HorizontalAlignment','Right',...
       'Color',simDataSetColor(i,:));  

  dy= measuredFiberVelocityAlongTendon(end,1).*(-m2mm)...
     -measuredFiberVelocityAlongTendon(end-1,1).*(-m2mm);
  dx = measuredPathVelocity(end,1).*(-m2mm) ...
      -measuredPathVelocity(end-1,1).*(-m2mm);
  textAngle = atan2(dy,dx)*(180/pi);
     
  set(ht,'Rotation',textAngle);
  
  fill([        measuredPathVelocity(:,1);...
         fliplr(measuredPathVelocity(:,2)')'].*(-m2mm), ...
        [       measuredTendonVelocity(:,1);...
         fliplr(measuredTendonVelocity(:,2)')'].*(-m2mm),...
         simDataSetColor(i,:),...
        'LineStyle','none',...        
        'DisplayName',[simDataSetName{i},' (Tendon Vel.)'],...
        'FaceAlpha', simDataSetFaceAlpha(1,i));  
  
  hold on;  
  

  ht=text(xEnd-xDelta, measuredTendonVelocity(end,1).*(-m2mm),...
       ['$$v^{T}$$',tagPreload],...
       'VerticalAlignment','Bottom','HorizontalAlignment','Left',...
       'Color',[1,0,0]);  
 
  dy= measuredTendonVelocity(end,1).*(-m2mm)...
     -measuredTendonVelocity(end-1,1).*(-m2mm);
  textAngle = atan2(dy,dx)*(180/pi);     
  set(ht,'Rotation',textAngle);
     
     
  box off;
  
  if(i==1)
    xlabel('Path Shortening Velocity (mm/s)');
    ylabel('Shortening Velocity (mm/s)'); 
    title('D. Path Velocity Decomposition: Fiber(AT) \& Tendon');
  end
  
  %%
  % Plot fiber kinematics
  %%
  [row,col] = find(subPlotPanelIndex==idxFiberLength);          
  subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
  subplot('Position',subPlotVec);  
  yyaxis left;
    
  xStart = measuredPathVelocity(1,1).*(-m2mm);
  xEnd   = measuredPathVelocity(end,1).*(-m2mm);
  
  fill([        measuredPathVelocity(:,1);...
         fliplr(measuredPathVelocity(:,2)')'].*(-m2mm), ...
        [       measuredNormFiberLength(:,1);...
         fliplr(measuredNormFiberLength(:,2)')'].*(-m2mm),...
         [44,137,160]./255,...
        'LineStyle','none',...        
        'DisplayName',[simDataSetName{i}, ' (Norm. Fiber Length)'],...
        'FaceAlpha', simDataSetFaceAlpha(1,i));  
  
  hold on;    
  
  
  
  clrA = [1,1,1];
  if(i==1)
    clrA = [1,0.75,0.75];    
  else
    clrA = [0.75,0.75,1];    
  end

  plot(measuredPathVelocity.*(-m2mm),...
      startNormFiberLength(:,1),...
      simDataSetLineType{i},...
     'Color',simDataSetColor(i,:).*0.75+clrA.*0.25,...        
     'LineWidth',simDataSetLineWidth(1,i),...
     'DisplayName',[simDataSetName{i}, ' (Norm. Fiber Length)']);
  hold on;  

  plot(measuredPathVelocity.*(-m2mm),...
    endNormFiberLength(:,1),...
     simDataSetLineType{i},...
     'Color',simDataSetColor(i,:).*0.25+clrA.*0.75,...        
     'LineWidth',simDataSetLineWidth(1,i),...
     'DisplayName',[simDataSetName{i}, ' (Norm. Fiber Length)']);
  hold on;  
  
  
  
  text(xEnd, measuredNormFiberLength(end,1),...
     ['$$\tilde{\ell}^{M}$$',tagPreload],...
     'VerticalAlignment','Bottom','HorizontalAlignment','Right',...
     'Color',[44,137,160]./255);
  
  box off;
  
  if(i==1)
    xlabel('Path Shortening Velocity (mm/s)');
    ylabel('Norm. Fiber Length');    
    title('E. Fiber Length \& Pennation Angle');
  end
  ylim([0,1.1]);   
  yyaxis right;
  
  fill([        measuredPathVelocity(:,1);...
         fliplr(measuredPathVelocity(:,2)')'].*(-m2mm), ...
        [       measuredPennationAngle(:,1);...
         fliplr(measuredPennationAngle(:,2)')'].*(180/pi),...
         [255,102,0]./255,...
        'LineStyle','none',...        
        'DisplayName',[simDataSetName{i}, ' (Pennation Angle)'],...
        'FaceAlpha', simDataSetFaceAlpha(1,i));   
  hold on;
  
  text(xEnd, measuredPennationAngle(end,1).*(180/pi),...
     ['$$\alpha$$',tagPreload],...
     'VerticalAlignment','Bottom','HorizontalAlignment','Right',...
     'Color',[255,102,0]./255);
  if(i==1)
    ylabel('Pennation Angle (deg)');
  end
  ylim([0,20]); 
  yyaxis left;  
  box off;
  
  %%
  % Plot multipliers
  %%
  [row,col] = find(subPlotPanelIndex==idxMultipliers);          
  subPlotVec = reshape(subPlotPanel(row,col,:),1,4); 
  
  xStart= measuredPathVelocity(1,1).*(-m2mm);
  xEnd  = measuredPathVelocity(end,1).*(-m2mm);
  xDelta = (xEnd-xStart)*0.1;
  yDelta = 0.075;
  yDeltaFixed=yDelta;
  xDeltaFixed=2*xDelta;
  if(mod(i,2)==0)
    xDelta=0;
    yDelta=0;
  end
  
  subplot('Position',subPlotVec);  

    
  fill([        measuredPathVelocity(:,1);...
         fliplr(measuredPathVelocity(:,2)')'].*(-m2mm), ...
        [       measuredActiveForceLengthMultiplier(:,1);...
         fliplr(measuredActiveForceLengthMultiplier(:,2)')'],...
         [1,0,0],...
        'LineStyle','none',...        
        'DisplayName',[simDataSetName{i}, ' (fal)'],...
        'FaceAlpha', simDataSetFaceAlpha(1,i));   
  hold on;  
  
   
  text(xEnd, measuredActiveForceLengthMultiplier(end,1)-yDelta,...
       ['$$f^{L}(\tilde{\ell}^{CE})$$',tagPreload],...
       'VerticalAlignment','Bottom','HorizontalAlignment','Right',...
       'Color',[1,0,0]);
  
  fill([        measuredPathVelocity(:,1);...
         fliplr(measuredPathVelocity(:,2)')'].*(-m2mm), ...
        [       measuredPassiveForceLengthMultiplier(:,1);...
         fliplr(measuredPassiveForceLengthMultiplier(:,2)')'],...
         [0,0,1],...
        'LineStyle','none',...        
        'DisplayName',[simDataSetName{i}, ' (fpe)'],...
        'FaceAlpha', simDataSetFaceAlpha(1,i));   
  hold on;  
       
    
  text(xEnd-xDelta-xDeltaFixed, ...
        measuredPassiveForceLengthMultiplier(end,1)-yDelta,...
       ['$$f^{PE}(\tilde{\ell}^{CE})$$',tagPreload],...
       'VerticalAlignment','Bottom','HorizontalAlignment','Right',...
       'Color',[0,0,1]);
  
  
  fill([        measuredPathVelocity(:,1);...
         fliplr(measuredPathVelocity(:,2)')'].*(-m2mm), ...
        [       measuredForceVelocityMultiplier(:,1);...
         fliplr(measuredForceVelocityMultiplier(:,2)')'],...
         [0,0,0],...
        'LineStyle','none',...        
        'DisplayName',[simDataSetName{i}, ' (fv)'],...
        'FaceAlpha', simDataSetFaceAlpha(1,i));   
  hold on;       
     
  text(xEnd, measuredForceVelocityMultiplier(end,1)-yDelta,...
       ['$$f^{V}(\tilde{v}^{CE})$$',tagPreload],...
       'VerticalAlignment','Bottom','HorizontalAlignment','Right',...
       'Color',[0,0,0]);
    

  fill([        measuredPathVelocity(:,1);...
         fliplr(measuredPathVelocity(:,2)')'].*(-m2mm), ...
        [       measuredNormDamping(:,1);...
         fliplr(measuredNormDamping(:,2)')'],...
         [0,1,1],...
        'LineStyle','none',...        
        'DisplayName',[simDataSetName{i}, ' (damping)'],...
        'FaceAlpha', simDataSetFaceAlpha(1,i));   
  hold on;    
  
  text(xEnd-xDelta, measuredNormDamping(end,1)-yDelta,...
       ['$$\tilde{v}^{CE}\,\beta$$',tagPreload],...
       'VerticalAlignment','Bottom','HorizontalAlignment','Right',...
       'Color',[0,1,1]);
  
  box off;    
  if(i==1)
    xlabel('Path Shortening Velocity (mm/s)');
    ylabel('Multipliers');    
    title('F. Damped Hill Model Multipliers');
    
  end    
  
end



for i=1:1:length(subplotList)
  [row,col] = find(subPlotPanelIndex==subplotList(i,1));          
  subPlotVec = reshape(subPlotPanel(row,col,:),1,4);    
  subplot('Position',subPlotVec);    
  if(simDataAddLegend(1,i)==1)
    legend('Location',simDataLegendPosition{i});
    legend boxoff;
  end

  xticks(subplotTicks(i).xticks);
  yticks(subplotTicks(i).yticks);  
  
  xlim(subplotXlim(i,:));
  ylim(subplotYlim(i,:));
  

end

figure(fig_Fv); 
configPlotExporter;
print('-dpdf',[outputFolder,outputFileName]); 

